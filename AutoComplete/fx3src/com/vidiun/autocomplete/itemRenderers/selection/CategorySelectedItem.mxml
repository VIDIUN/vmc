<?xml version="1.0" encoding="utf-8"?>
<base:SelectionItemBase xmlns:mx="http://www.adobe.com/2006/mxml"
						xmlns:base="com.vidiun.autocomplete.itemRenderers.selection.base.*"
						xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"
						toolTipCreate="selectionitembase1_toolTipCreateHandler(event)" toolTip=" ">
	<mx:Script>
		<![CDATA[
			import com.vidiun.autocomplete.itemRenderers.selection.utils.CategoryToolTip;
			import com.vidiun.types.VidiunAppearInListType;
			import com.vidiun.types.VidiunContributionPolicyType;
			import com.vidiun.types.VidiunPrivacyType;
			import com.vidiun.vo.VidiunCategory;
			
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			
			private var _customTip:CategoryToolTip;
			
			override public function set item(value:Object):void{
				super.item = value;
				var category:VidiunCategory = _item as VidiunCategory;
				if (category.privacyContexts != null){
					_customTip = new CategoryToolTip();
					
					// Full path
					_customTip.fullPath = category.fullName;
					
					// Privacy context
					_customTip.privacyContext = resourceManager.getString('autocomplete', 'privacyContext' ,[category.privacyContext]);
					
					// Content Privacy
					var accessString:String 
					switch (category.privacy){
						case VidiunPrivacyType.ALL:
							accessString = resourceManager.getString('autocomplete', 'noRestriction');
							break;
						case VidiunPrivacyType.AUTHENTICATED_USERS:
							accessString = resourceManager.getString('autocomplete', 'requiresAuthentication');
							break;
						case VidiunPrivacyType.MEMBERS_ONLY:
							accessString = resourceManager.getString('autocomplete', 'private');
							break;
					}
					_customTip.access = resourceManager.getString('autocomplete', 'contentPrivacy', [accessString]);
					
					// Category Listing
					var listedString:String;
					switch (category.appearInList){
						case VidiunAppearInListType.CATEGORY_MEMBERS_ONLY:
							listedString = resourceManager.getString('autocomplete', 'private');
							break;
						case VidiunAppearInListType.PARTNER_ONLY:
							listedString = resourceManager.getString('autocomplete', 'noRestriction');
							break;
					}
					_customTip.listed = resourceManager.getString('autocomplete', 'categoryListing', [listedString]);
					
					// Contribution Policy
					var contributionString:String;
					switch (category.contributionPolicy){
						 case VidiunContributionPolicyType.ALL:
							 contributionString = resourceManager.getString('autocomplete', 'noRestriction');
							 break;
						 case VidiunContributionPolicyType.MEMBERS_WITH_CONTRIBUTION_PERMISSION:
							 contributionString = resourceManager.getString('autocomplete', 'private');
							 break;
					}
					_customTip.contribution = resourceManager.getString('autocomplete', 'contributionPolicy', [contributionString]);
					
					// Specific end user permissions
					var permissionsString:String;
					if (category.membersCount > 0){
						permissionsString = resourceManager.getString('autocomplete', 'positivePresence');
					} else {
						permissionsString = resourceManager.getString('autocomplete', 'negativePresence');
					}
					_customTip.specificPermissions = resourceManager.getString('autocomplete', 'specificPermissions', [permissionsString]);
					
				} else {
					toolTip = category.fullName;
				}
			}
			
			protected function selectionitembase1_toolTipCreateHandler(event:ToolTipEvent):void
			{
				if (_customTip){
					event.toolTip = _customTip;
				}
			}
			
		]]>
	</mx:Script>
	<classes:ShorterTextInput id="textInput" />
	<classes:IconButton id="button"/>
	<mx:Spacer id="spacer"/>
</base:SelectionItemBase>
