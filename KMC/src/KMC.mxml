<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
				minWidth="955" minHeight="600" creationComplete="creationCompleteHandler(event)" paddingLeft="0"
				paddingRight="0" paddingBottom="0" paddingTop="0" verticalGap="0" backgroundColor="0xFFFFFF" >
	<mx:Metadata>
		[ResourceBundle("vmc")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.commands.MultiRequest;
			import com.vidiun.commands.permission.PermissionList;
			import com.vidiun.commands.session.SessionGet;
			import com.vidiun.commands.uiConf.UiConfGet;
			import com.vidiun.commands.user.UserGet;
			import com.vidiun.commands.userRole.UserRoleGet;
			import com.vidiun.config.VidiunConfig;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.events.VedErrorEvent;
			import com.vidiun.edw.model.datapacks.ContextDataPack;
			import com.vidiun.edw.model.types.APIErrorCode;
			import com.vidiun.events.VidiunEvent;
			import com.vidiun.vmc.business.Helpist;
			import com.vidiun.vmc.business.JSGate;
			import com.vidiun.vmc.business.VmcModuleLoader;
			import com.vidiun.vmc.business.VmcPluginManager;
			import com.vidiun.vmc.events.VmcErrorEvent;
			import com.vidiun.vmc.events.VmcHelpEvent;
			import com.vidiun.vmc.events.VmcModuleEvent;
			import com.vidiun.vmc.events.VmcNavigationEvent;
			import com.vidiun.vmc.model.VmcModelLocator;
			import com.vidiun.vmc.modules.VmcModule;
			import com.vidiun.vmc.utils.XMLUtils;
			import com.vidiun.vmc.vo.UserVO;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.managers.FileUploadManager;
			import com.vidiun.utils.VUtils;
			import com.vidiun.utils.ObjectHelpers;
			import com.vidiun.vo.VidiunFilterPager;
			import com.vidiun.vo.VidiunPermissionListResponse;
			import com.vidiun.vo.VidiunSessionInfo;
			import com.vidiun.vo.VidiunUiConf;
			import com.vidiun.vo.VidiunUser;
			import com.vidiun.vo.VidiunUserRole;
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ResourceEvent;
			import mx.events.StyleEvent;
			import mx.modules.ModuleLoader;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;


			/**
			 * VMC version
			 * */

			public static var VERSION:String = "5.43.13";


			// ==============================================================================
			// members
			// ==============================================================================


			/**
			 * a global access point to the application's flashvars,
			 * all keys are converted to lower case and no underscores.
			 * */
			private var _flashvars:Object;

			/**
			 * application model
			 * */
			private var _modelLocator:VmcModelLocator = VmcModelLocator.getInstance();

			/**
			 * module loader
			 * */
			private var _vmcModuleLoader:VmcModuleLoader;

			/**
			 * VMC UIConf
			 * */
			private var _uiconf:XML;

			/**
			 * Global Context menu
			 * */
			private var _cm:ContextMenu;

			/**
			 * the module VMC should start with, as determined by the url hash
			 * */
			private var _startModule:Object;

			/**
			 * currently showing locale code
			 * */
			protected var _localeCode:String;

			private var _vcTimer:Timer;


			/**
			 * Singletone PermissionManager
			 **/
			public var permissionManager:PermissionManager;

			private var _moduleLoader:ModuleLoader;
			private var _currentObject:Object;

			/**
			 * _vmcFunction.module: module on which we expect to find the following function. <br>
			 * _vmcFunction.funcName: name of function to execute when the requested module is loaded. <br>
			 * _vmcFunction.arg: (optional) a single string argument for the function
			 * */
			private var _vmcFunction:Object;

			/**
			 * plugins are FlexModules which do not function as VmcModules.
			 * they are loaded as simple flex modules and can be refered to
			 * by their id, via the plugins manager.
			 * */
			private var _pluginManager:VmcPluginManager;


			// ==============================================================================
			// methods
			// ==============================================================================

			/**
			 * load skin dynamically
			 * @param path	path to skin .swf file
			 * */
			protected function loadSkin(path:String = ""):void {
				var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(path);
				eventDispatcher.addEventListener(StyleEvent.COMPLETE, onSkinLoaded, false, 0, true);
				eventDispatcher.addEventListener(StyleEvent.ERROR, onSkinLoaded, false, 0, true);
			}


			/**
			 * Skin loaded or load error. </br>
			 * We go on anyway, alerting the user if skin load failed.
			 * */
			protected function onSkinLoaded(event:StyleEvent):void {
				if (event.type == StyleEvent.ERROR) {
					alert(event.errorText, ResourceManager.getInstance().getString('vmc', 'skin_load_error_title'));
				}
				
				// title fonts 
				var titleFont:String = resourceManager.getString('vmc', 'title_font'); 
				if (titleFont){
					StyleManager.getStyleDeclaration(".pageTitle2").setStyle("fontFamily", titleFont);
					StyleManager.getStyleDeclaration(".filterTitleHeader").setStyle("fontFamily", titleFont);
				}
				
				// alert buttons width
				var alertButtonWidth:int = resourceManager.getInt('vmc', 'alert_button_width');
				if (alertButtonWidth) {
					Alert.buttonWidth = alertButtonWidth;
				}

				// remove modules that should not be loaded from the VMC uiconf
				var tabsToHide:Array = permissionManager.getRelevantSubTabsToHide(null);
				for each (var moduleName:String in tabsToHide) {
					removeModule(_uiconf, moduleName);
				}

				loadPlugins();
				setHtmlTabs();

				// switch to needed tab
				gotoPage(ExternalInterface.call("vmc.mediator.readUrlHash"));
			}

			protected function loadPlugins():void {
				var handlers:Object = {};
				handlers[VmcNavigationEvent.NAVIGATE] = navigateToModule;
				_pluginManager = new VmcPluginManager(this, _modelLocator.vidiunClient, _flashvars, handlers);
				_pluginManager.addEventListener(VmcErrorEvent.ERROR, onError);
				_pluginManager.loadPlugins(_uiconf);
			}





			/**
			 * if any flashvars are supposed to override uiconf values, set them here to the uiconf.
			 * flashvars names will be constructed from module id + "." + xml structure, nodes
			 * separated by ".", i.e, "content.uiconf.metadata" or "admin.locale.language"
			 */
			protected function overrideDataByFlashvars(conf:String, flashvars:Object):String {
				var confFile:XML = new XML(conf);
				// override with general language definition
				if (flashvars.language && !flashvars["vmc.locale.language"]) {
					flashvars["vmc.locale.language"] = flashvars.language;
				}
				// process
				for (var key:String in flashvars) {
					var elements:Array = key.split(".");
					if (elements[0] == 'vmc') {
						// need to process
						// get to the node we need to edit
						var xml:XML = XMLUtils.getElement(confFile, elements);
						if (xml) {
							delete xml.children()[0];
							xml.appendChild(flashvars[key]);
						}
					}
				}
				// re-set values
				return confFile.toXMLString();
			}


			/**
			 * show correct tabs in HTML
			 * */
			protected function setHtmlTabs():void {
				var jstabs:Array = new Array();
				var xmltabs:XMLList = _uiconf.modules.module;
				var jstab:Object;
				var tabKey:String;
				var tabName:String;
				for each (var xmltab:XML in xmltabs) {
					jstab = new Object();
					tabKey = xmltab.@displayName.toString();
					tabName = resourceManager.getString('vmc', tabKey);
					if (!tabName) {
						tabName = tabKey;
					}
					jstab.display_name = tabName;
					jstab.module_name = xmltab.@id.toString();
					jstab.subtab = xmltab.@subtab.toString();

					if (xmltab.@vmcFunction.toString().length > 0) {
						jstab.type = "action";
					}
					else {
						jstab.type = "tab"; 
					}
					if (xmltab.@htmlUrl.toString().length > 0) {
						jstab.html_url = xmltab.@htmlUrl.toString();
					}
					jstabs.push(jstab);
				}
				// call JS function to set html tabs
				JSGate.createTabs(jstabs);
			}


			/**
			 * remove a module from the VMC uiconf
			 * @param moduleId	id of module to remove
			 * */
			protected function removeModule(uiconf:XML, moduleId:String):void {
				if (uiconf.modules.module.(@id == moduleId).length() > 0) {
					delete uiconf.modules.module.(@id == moduleId)[0];
				}
			}
			
			

			/**
			 * process flashvars and load VMC uiconf
			 **/
			protected function creationCompleteHandler(event:FlexEvent):void {
				Security.allowDomain('*');
				systemManager.allowDomain("*");
				_cm = new ContextMenu();
				_cm.hideBuiltInItems();

				var version:ContextMenuItem = new ContextMenuItem("VMC version:" + VERSION);
				_cm.customItems.push(version);

				this.contextMenu = _cm;

				// listen to module/popup/plugin requests
				systemManager.addEventListener(VmcNavigationEvent.NAVIGATE, navigateToModule);
				systemManager.addEventListener(VmcErrorEvent.ERROR, onError);
				systemManager.addEventListener(VmcHelpEvent.HELP, Helpist.showHelp);
				systemManager.addEventListener(/* EntryDetailsWin.HELP_REQUEST */ "helpRequest", Helpist.showHelp);

				// save flashvars (keep original keys as well as lowercased keys)
				var objParam:Object = Application.application.parameters;
				var oLowers:Object = ObjectHelpers.lowerNoUnderscore(objParam);
				for (var key:String in oLowers) {
					objParam[key] = oLowers[key];
				}
				_flashvars = objParam;

				// hook ExternalInterface:
				if (ExternalInterface.available) {
					ExternalInterface.addCallback("gotoPage", gotoPage);
					ExternalInterface.addCallback("alert", alert);
					ExternalInterface.addCallback("hasOngoingProcess", hasOngoingProcess);
					ExternalInterface.addCallback("doHelp", Helpist.showHelp);
				}

				// handle stats:
				if (objParam.disableanalytics || !objParam.urchinnumber) {
					GoogleAnalyticsTracker.getInstance().enabled = false;
				}

				// create VidiunClient:
				var configuration:VidiunConfig = new VidiunConfig();
				configuration.partnerId = objParam.partnerid;
				configuration.ignoreNull = 1;
				configuration.protocol = objParam.protocol ? objParam.protocol : "http://";
				configuration.domain = VUtils.hostFromCode(objParam.host);
				configuration.srvUrl = objParam.srvurl;
				configuration.clientTag = "vmc:" + VERSION;
				configuration.vs = objParam.vs;

				_modelLocator.vidiunClient = new VidiunClient(configuration);
				_modelLocator.vidiunClient.queueing = true;
				_modelLocator.vidiunClient.addEventListener(VidiunClient.CALL_QUEUED, setTimer);
				_modelLocator.vidiunClient.addEventListener(VidiunClient.QUEUE_FLUSHED, setTimer);

				var contextData:ContextDataPack = VMvCModel.getInstance().getDataPack(ContextDataPack) as ContextDataPack;
				contextData.sourceUrl = systemManager.loaderInfo.url.substr(0, systemManager.loaderInfo.url.lastIndexOf("/"));
				contextData.protocol = configuration.protocol;

				// create a module loader:
				_vmcModuleLoader = new VmcModuleLoader();
				_vmcModuleLoader.addEventListener(VmcModuleEvent.MODULE_LOAD_ERROR, onModuleLoadError, false, 0, true);
				_vmcModuleLoader.addEventListener(VmcModuleEvent.MODULE_LOADED, onModuleReady, false, 0, true);

				// load VMC uiconf and roles and permission uiConf  
				var mr:MultiRequest = new MultiRequest();

				var uiconf:UiConfGet = new UiConfGet(objParam.vmcuiconf);
				var permissions:UiConfGet = new UiConfGet(objParam.permissionuiconf);

				// get user id from service
				var ssnget:SessionGet = new SessionGet();
				mr.mapMultiRequestParam(3, "userId", 4, "userId");
				//
				// get dummy, the real user id param is passed from the multirequest
				var userget:UserGet = new UserGet('1');
				mr.mapMultiRequestParam(4, "roleIds", 5, "userRoleId");
				// get dummy, the real role id param is passed from the multirequest
				var roleGet:UserRoleGet = new UserRoleGet(1);
				var p:VidiunFilterPager = new VidiunFilterPager();
				p.pageSize = 500;
				var perms:PermissionList = new PermissionList(_modelLocator.permissionsListFilter, p);

				mr.addAction(uiconf);
				mr.addAction(permissions);
				mr.addAction(ssnget);
				mr.addAction(userget);
				mr.addAction(roleGet);
				mr.addAction(perms);

				mr.addEventListener(VidiunEvent.COMPLETE, dataLoadHandler, false, 0, true);
				mr.addEventListener(VidiunEvent.FAILED, dataLoadFailedHandler, false, 0, true);
				_modelLocator.vidiunClient.post(mr);
			}


			/**
			 * create the client flushing timer, activate or deactivate it as needed.
			 * */
			private function setTimer(e:Event):void {
				switch (e.type) {
					case VidiunClient.CALL_QUEUED:
						if (!_vcTimer) {
							_vcTimer = new Timer(250);
							_vcTimer.addEventListener(TimerEvent.TIMER, handleTimer, false, 0, true);
						}
						if (!_vcTimer.running) {
							_vcTimer.start();
						}
						break;
					case VidiunClient.QUEUE_FLUSHED:
						if (_vcTimer) {
							_vcTimer.stop();
						}
						break;
				}
			}


			/**
			 * flush client calls.
			 * */
			private function handleTimer(e:TimerEvent):void {
				_modelLocator.vidiunClient.flush();
			}


			/**
			 * UiConf failed to load, alert user
			 */
			protected function dataLoadFailedHandler(event:VidiunEvent):void {
				var rm:IResourceManager = ResourceManager.getInstance();
				var s:String = rm.getString('vmc', 'uiconf_load_fail', [event.error.errorMsg]);
				alert(s, rm.getString('vmc', 'error_title'));
			}


			/**
			 * module failed to load, alert user
			 */
			protected function onModuleLoadError(event:VmcModuleEvent):void {
				var rm:IResourceManager = ResourceManager.getInstance();
				var s:String = rm.getString('vmc', 'module_load_fail', [event.errorText]);
				alert(s, rm.getString('vmc', 'error_title'));
				if (progressbar.source == event.moduleLoader) {
					hideProgressBar();
				}
			}


			/**
			 * check if the given object is an error object and respond.
			 * @param  errorObj	server response, object to check
			 * @return true if the given object is a generic error object, false otherwise
			 * */
			protected function isError(errorObj:Object):Boolean {
				if (errorObj) {
					if (errorObj.code == APIErrorCode.INVALID_VS) {
//						alert(errorObj.message, ResourceManager.getInstance().getString('vmc', 'error_title'), Alert.OK, null, expired);
						JSGate.expired();
					}
					else {
						alert(errorObj.message, ResourceManager.getInstance().getString('vmc', 'error_title'));
					}
					return true;
				}
				return false;
			}


			protected function expired(e:CloseEvent):void {
				JSGate.expired();
			}


			/**
			 * Vmc uiConf and RolesAndPermissions loaded. Parse it and load skin and relevant modules.
			 */
			protected function dataLoadHandler(event:VidiunEvent):void {
				// [0] VMC uiconf:
				if (isError(event.data[0].error))
					return;

				_uiconf = new XML(overrideDataByFlashvars((event.data[0] as VidiunUiConf).confFile, _flashvars));
				if (_uiconf.descendants().length() == 0) {
					Alert.show("VMC UIConf is empty", "Error");
					return;
				}
				// help url
				var helpBaseUrl:String = _uiconf.help.helpPage.text().toString();
				Helpist.init(_uiconf.help.item, helpBaseUrl, _flashvars.host, _flashvars.protocol);

				// [1] permissions:
				if (isError(event.data[1].error))
					return;
				var uidefinition:XML = new XML((event.data[1] as VidiunUiConf).confFile); // all permissions
				// [2] SessionInfo (only used for getting user id, which is already used in the user.get call)
				if (isError(event.data[2].error)) {
					VidiunSessionInfo;
					return;
				}
				// [3, 4] user and role:
				if (isError(event.data[3].error))
					return;
				if (isError(event.data[4].error))
					return;
				var uvo:UserVO = new UserVO();
				uvo.user = event.data[3] as VidiunUser;
				uvo.role = event.data[4] as VidiunUserRole;
				_modelLocator.userInfo = uvo;

				var roleOfCurrentUser:String;
				roleOfCurrentUser = uvo.role.permissionNames;

				// [5] partner permissions list
				if (isError(event.data[5].error))
					return;

				permissionManager = PermissionManager.getInstance();
				permissionManager.addEventListener(VedErrorEvent.ERROR, onError);
				permissionManager.init(uidefinition, roleOfCurrentUser, event.data[5] as VidiunPermissionListResponse);

				// GAtracking
				var ga:GoogleAnalyticsTracker = GoogleAnalyticsTracker.getInstance();
				if (ga.enabled) {
					// only if we didn't disable before..
					ga.init(_modelLocator.userInfo.user.partnerId.toString(), _modelLocator.userInfo.user.id, this, "VMC", _flashvars.urchinnumber, "AS3", _flashvars.gaDebug == "true" ? true : false);
				}

				// load locale
				loadLocale(getUrl(_uiconf.locale.path.toString()), _uiconf.locale.language.toString());

				// file uploader
				FileUploadManager.getInstance().vc = _modelLocator.vidiunClient;
				FileUploadManager.getInstance().debugMode = _flashvars.debugmode;
				if (!_flashvars.maxuploadsize) {
					_flashvars.maxuploadsize = parseFloat(_uiconf.upload.maxSize.toString());
					_flashvars.maxUploadSize = _flashvars.maxuploadsize;
				} 
				// get the concurrentuploads param from vmc uiconf 
				FileUploadManager.getInstance().concurrentUploads = parseInt(_uiconf.upload.concurrent.toString());

			}


			/**
			 * Load locale data.
			 * @param localePath	path to the locale (.swf) file
			 * @param language		locale code (i.e. en_US)
			 * */
			protected function loadLocale(localePath:String, language:String):void {
				_localeCode = language;
				localePath = localePath.replace(/{locale}/g, language);
				var eventDispatcher:IEventDispatcher = ResourceManager.getInstance().loadResourceModule(localePath, true);
				eventDispatcher.addEventListener(ResourceEvent.ERROR, localeLoadCompleteHandler);
				eventDispatcher.addEventListener(ResourceEvent.COMPLETE, localeLoadCompleteHandler);
			}


			/**
			 * Set use of loaded locale.
			 * This is also the place to update any values which are not
			 * bound to resource manager values and have to be set manualy.
			 * */
			protected function localeLoadCompleteHandler(event:ResourceEvent):void {
				event.target.removeEventListener(ResourceEvent.COMPLETE, localeLoadCompleteHandler);
				event.target.removeEventListener(ResourceEvent.ERROR, localeLoadCompleteHandler);
				if (event.type == ResourceEvent.ERROR) {
					Alert.show(event.errorText, "Locale Error", Alert.OK);
				}
				var chain:Array;
//				if (_localeCode == "en_US") {
//					chain = [_localeCode];
//				}
//				else {
				chain = [_localeCode, "en_US"];
//				}
				ResourceManager.getInstance().localeChain = chain;

				// load skin
				loadSkin(getUrl(_uiconf.skinPath.toString()));
			}


			/**
			 * initialize module: set its size and id, trigger its init method
			 * and switch to its needed subtab.
			 * */
			protected function onModuleReady(event:VmcModuleEvent):void {
				// use the moduleLoader to get module load identifier
				var ml:ModuleLoader = event.moduleLoader;
				var moduleid:String = _vmcModuleLoader.getModuleLoadId(ml);

				// get the loaded module
				var mod:VmcModule = ml.child as VmcModule;

				// fix size:
				mod.percentHeight = 100;
				mod.percentWidth = 100;
				mod.id = mod.getModuleName();

				// get the uiconf id this module should load:
				var uiconfid:String = _uiconf.modules.module.(@id == moduleid)[0].@uiconf;

				// init:
				mod.init(_modelLocator.vidiunClient, uiconfid, _flashvars, _modelLocator.userInfo, _cm);

				// if we need to start with a module, see if it's this one
				if (_startModule && _startModule.moduleName == mod.id) {
					if (_startModule.subtab) {
						mod.showSubtab(_startModule.subtab, _startModule.extra);
					}
					_startModule = null;
				}
				if (progressbar.source == ml) {
					hideProgressBar();
				}
			}


			/**
			 * get the default page for this user according to their permissions:
			 * the first module in the VMCUiconf that is not hidden.
			 * @return 	an object {moduleName:String}, where moduleName is an id of
			 * 			a module this user is allowed to see.
			 * */
			protected function getDefaultPage():Object {
				var o:Object = {};
				var modules:XMLList = _uiconf.modules.module;
				var moduleid:String;
				var hideModule:Boolean;
				for each (var module:XML in modules) {
					moduleid = module.@id.toString();
					for (var s:String in permissionManager.hideTabs) {
						if (moduleid == s) {
							// this module is hidden
							hideModule = true;
							break;
						}
					}
					if (!hideModule) {
						// return this module name
						o.moduleName = moduleid;
						o.subtab = module.@subtab.toString();
						break;
					}
				}
				return o;
			}


			/**
			 * decide if should use relative or absolute url.
			 * if the given path is ablsolute, return the same string.
			 * if the given path is relative, concatenate it to the swf url.
			 * @param	given path
			 * @return	path to use
			 * */
			protected function getUrl(path:String):String {
				var url:String;
				if (path.indexOf("http") == 0) {
					url = path;
				}
				else {
					var base:String = loaderInfo.url.substr(0, loaderInfo.url.lastIndexOf("/"));
					url = base + "/" + path;
				}
				return url;
			}


			/**
			 * Switch to a different VMC module (tab).
			 * Can also include subtab on the new module.
			 * This method can be triggered from JS using ExternalInterface.
			 * @param o		{moduleName:String, subtab:String, extra:Object}
			 * */
			protected function gotoPage(o:Object):void {
				var mInfo:XML;
				_currentObject = o;
				// create navigation info object:
				// ------------------------------
				if (o) {
					mInfo = _uiconf.modules.module.(@id == o.moduleName)[0];
				}
				else {
					// take the first on the VMC uiconf
					mInfo = _uiconf.modules.module[0];
					o = {moduleName: mInfo.@id.toString(), subtab: mInfo.@subtab.toString()};
					_currentObject = o;
				}
				if (!mInfo) {
					var s:String = ResourceManager.getInstance().getString('vmc', 'module_unavailable', [o.moduleName]);
//					dispatchEvent(new VmcErrorEvent(VmcErrorEvent.ERROR, s));
					trace(s);
					gotoPage(getDefaultPage());
					return;
				}

				// if no subtab supplied, use the one listed in the uiconf
				if (!o.subtab || o.subtab == "") {
					o.subtab = mInfo.@subtab.toString();
				}
				if (!o.extra) {
					o.extra = new Object();
				}
				// if no html tab, use the one from uiconf
				if (!o.extra.htmlUrl) {
					o.extra.htmlUrl = mInfo.@htmlUrl.toString();
				}
				// if no vmc function, use the one from uiconf
				if (!o.extra.vmcFunction) {
					o.extra.vmcFunction = mInfo.@vmcFunction.toString();
				}

				// actual navigation part:
				// -----------------------
				// check for HTML tabs
				if (o.extra.htmlUrl) {
					if (o.extra.htmlUrl.indexOf('ei:') == 0) {
						// trigger the rest of the string using ExternalInterface
						JSGate.triggerJS(o.extra.htmlUrl.substring(3));
					}
					else {
						// tell JS it should show a html tab
						JSGate.openIframe(o.extra.htmlUrl);
					}
					// tell html
					JSGate.writeUrlHash(o.moduleName, o.subtab);
					JSGate.setTab(o.moduleName, true);
				}
				// check for action tabs (vmcFunction="module_id.function_name")
				else if (o.extra.vmcFunction) {
					handleVmcFunction(o);
					// tell html
//					JSGate.setTab(o.moduleName, false);
					return;
				}
				else {
					// load VMC module
					loadModule(mInfo);
				}
				// tell app
				dispatchEvent(new VmcNavigationEvent(VmcNavigationEvent.NAVIGATION_COMPLETE, o.moduleName, o.subtab)); 
			}

			
			/**
			 * input: [module.]funcName[(singleStringArg)]
			 * output: {module, funcName, arg}
			 * */
			private function parseVmcFunction(func:String):Object {
				var regex:RegExp = /((\w+)\.)?(\w+)(\((\w*)\))?/g ;
				var result:Object = regex.exec(func);
				var o:Object = {};
				o.module = result[2] ? result[2] : null;
				o.funcName = result[3] ? result[3] : null;
				o.arg = result[5] ? result[5] : null;
				return o;
			}

			/**
			 * execute given function either on VMC itself, a module or a plugin
			 * */
			private function handleVmcFunction(moduleInfo:Object):void {
				
				var o:Object = parseVmcFunction(moduleInfo.extra.vmcFunction);
				
				// triggering VMC method
				if (!o.module) {
					if (o.arg) {
						this[o.funcName](o.arg);
					}
					else {
						this[o.funcName]();
					}
				}
				// triggering ready module method
				else if (getModuleParent(o.module) && (getModuleParent(o.module).child as VmcModule).isModuleReady) {
					try {
						if (o.arg) {
							getModuleParent(o.module).child[o.funcName](o.arg);
						}
						else {
							getModuleParent(o.module).child[o.funcName]();
						}
					}
					catch (e:Error) {
						alert(resourceManager.getString('vmc', 'method_dont_exist', [o.module, o.funcName]), resourceManager.getString('vmc', 'error_title'));
						trace("error: ", e.name);
						trace("error: ", e.errorID, e.message);
						trace(e.getStackTrace());
						trace('-----------------------------------');
					}
				}
				// either unloaded module or a plugin
				else {
					var mInfo:XML = _uiconf.modules.module.(@id == o.module)[0];
					if (mInfo) {
						if (moduleInfo.extra.forceLoad == "false") {
							// this means we don't load a module, the function will not be triggered at all.
							return;
						}
						// save func_name
						_vmcFunction = o;
						// add listener to moduleReady event
						addEventListener(VmcModule.MODULE_READY, handleSavedVmcFunction, false, 0, true);
						// start loading the relevant module
						_currentObject = {moduleName: o.module, subtab: mInfo.@subtab.toString()};
						loadModule(mInfo);
						
					}
					// no module, try triggering plugin method
					else {
						_pluginManager.executePluginMethod(o.module, o.funcName);
							// this is our last option, and if it fails a VmcErrorEvent is dispatched
							// so basically, wer'e good.
					}
				}
			}

			/**
			 * if a vmcFunction is waiting to execute for the ready module, execute it.
			 * */
			private function handleSavedVmcFunction(e:Event):void {
				if (_vmcFunction && (e.target as VmcModule).getModuleName() == _vmcFunction.module) {
					removeEventListener(VmcModule.MODULE_READY, handleSavedVmcFunction, false);
					// try to trigger func_name on relevant module
					try {
						if (_vmcFunction.arg) {
							(e.target as VmcModule)[_vmcFunction.funcName](_vmcFunction.arg);
						}
						else {
							(e.target as VmcModule)[_vmcFunction.funcName]();
						}
					}
					catch (er:Error) {
						alert(resourceManager.getString('vmc', 'method_dont_exist', [_vmcFunction.module, _vmcFunction.funcName]), resourceManager.getString('vmc', 'error_title'));
						trace("error: ", er.name);
						trace("error: ", er.errorID, er.message);
						trace(er.getStackTrace());
						trace('-----------------------------------');
					}
					_vmcFunction = null;
				}
			}

			/**
			 * load VMC module
			 * @param mInfo		module info from uiconf
			 * */
			private function loadModule(mInfo:XML):void {
				var url:String = getUrl(mInfo.@path.toString());
				_moduleLoader = _vmcModuleLoader.loadVmcModule(url, mInfo.@id);
				if (!_moduleLoader.parent) {
					// this is the first time we load this module.
					// add to the viewstack if needed
					mainViewStack.addChild(_moduleLoader);
					// show preloader, set its source
					progressbar.source = _moduleLoader;
					progressbar.visible = true;
				}

				if ((mainViewStack.selectedChild) && (mainViewStack.selectedChild as ModuleLoader).child) {
					this.addEventListener(VmcModule.FINISHED_SAVING, onModuleReadyToNavigate);
					((mainViewStack.selectedChild as ModuleLoader).child as VmcModule).checkForSaveSubTab();
				}
				else {
					changeSelectedTab();
				}
			}


			private function changeSelectedTab():void {
				mainViewStack.selectedChild = _moduleLoader;
				_startModule = _currentObject;
				JSGate.showFlash();
				if (_moduleLoader.child && _currentObject.subtab) {
					(_moduleLoader.child as VmcModule).showSubtab(_currentObject.subtab, _currentObject.extra);
				}
				// tell html
				JSGate.writeUrlHash(_currentObject.moduleName, _currentObject.subtab);
				JSGate.setTab(_currentObject.moduleName, true);
			}


			private function onModuleReadyToNavigate(event:Event):void {
				this.removeEventListener(VmcModule.FINISHED_SAVING, onModuleReadyToNavigate);
				changeSelectedTab();
			}


			/**
			 * get the ModuleLoader instance that holds the required module.
			 * @internal mainViewstack holds ModuleLoader instances, not modules.
			 * @param	name (id) of desired module.
			 * @return 	ml holding the given module.
			 * */
			protected function getModuleParent(moduleName:String):ModuleLoader {
				var children:int = mainViewStack.numChildren;
				var ml:ModuleLoader;
				for (var i:int = 0; i < children; i++) {
					ml = mainViewStack.getChildAt(i) as ModuleLoader;
					if (ml.child && (ml.child as VmcModule).getModuleName() == moduleName) {
						return ml;
					}
				}
				return null;

			}


			protected function hideProgressBar():void {
				progressbar.visible = false;
				progressbar.source = null;
			}


			/**
			 * Trigger module switching, triggerd in response to <code>VmcNavigationEvent.NAVIGATE</code>
			 * @param e		event holding navigation request info.
			 * */
			protected function navigateToModule(e:VmcNavigationEvent):void {
				e.stopImmediatePropagation();
				var o:Object = {moduleName: e.module, subtab: e.subtab, extra: e.data};
				gotoPage(o);
			}


			/**
			 * Show an error with the text on the error event.
			 * */
			protected function onPermissionError(e:VedErrorEvent):void {
				e.stopImmediatePropagation();
				alert(e.error, ResourceManager.getInstance().getString('vmc', 'error_title'));
			}

			/**
			 * Show an error with the text on the error event.
			 * This text should already be localized by the module
			 * which dispatched this event.
			 * */
			protected function onError(e:Event):void {
				e.stopImmediatePropagation();
				var error:String;
				if (e is VmcErrorEvent) {
					error = (e as VmcErrorEvent).error;
				}
				else if (e is VedErrorEvent) {
					error = (e as VedErrorEvent).error;
				}
				alert(error, ResourceManager.getInstance().getString('vmc', 'error_title'));
			}


			/**
			 * show an alert with the default "ok" button.
			 * @param
			 * */
			protected function alert(text:String, header:String = "", flags:uint = 4, parent:Sprite = null, closeHandler:Function = null):void {
				Alert.show(text, header, flags, parent, closeHandler);
			}


			/**
			 * check if any processes are going on that will
			 * stop upon navigating away from the VMC.
			 * */
			protected function hasOngoingProcess():String {
				var result:String;
				if (FileUploadManager.getInstance().getAllFiles().length > 0) {
					result = resourceManager.getString('vmc', 'ongoing_uploads');
				}
				return result;
			}




		]]>
	</mx:Script>
	<mx:ViewStack id="mainViewStack" width="100%" height="100%"/>
	<mx:ProgressBar id="progressbar" y="{(height - progressbar.height) / 2}" x="{(width - progressbar.width) / 2}"/>
</mx:Application>
