<?xml version="1.0" encoding="utf-8"?>
<!---
edit ConversionProfileAssetParams attributes
-->
<HelpTitleWindow xmlns="com.vidiun.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml"  
				 styleName="TitleWindowType2" creationComplete="creationCompleteHandler(event)"
				 title="{resourceManager.getString('account','conversionFlavorSettingsTitle')}" 
				 showCloseButton="true" close="{onClose()}" showHelpButton="true" help="helpHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.vmc.events.VmcHelpEvent;
			import com.vidiun.types.VidiunAssetParamsDeletePolicy;
			import com.vidiun.types.VidiunAssetParamsOrigin;
			import com.vidiun.types.VidiunFlavorReadyBehaviorType;
			import com.vidiun.types.VidiunNullableBoolean;
			import com.vidiun.vo.FlavorVO;
			import com.vidiun.vo.VidiunConversionProfileAssetParams;
			import com.vidiun.vo.VidiunLiveParams;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;


			private const LABEL_WIDTH:int = 200;
			private const ELEMENT_WIDTH:int = 180;
			
			
			/**
			 * data provider for the asset's ready behaviour
			 * */
			private const _availabilityOptions:Array = [
				{value:VidiunFlavorReadyBehaviorType.INHERIT_FLAVOR_PARAMS, name:ResourceManager.getInstance().getString('account', 'flavor_inherit')}, 
				{value:VidiunFlavorReadyBehaviorType.REQUIRED, name:ResourceManager.getInstance().getString('account', 'flavor_required')}, 
				{value:VidiunFlavorReadyBehaviorType.OPTIONAL, name:ResourceManager.getInstance().getString('account', 'flavor_optional')}
			];
			
			/**
			 * data provider for the asset's origin
			 * */
			private const _originOptions:Array = [
				{value:VidiunAssetParamsOrigin.CONVERT, name:ResourceManager.getInstance().getString('account', 'flavor_convert')},
				{value:VidiunAssetParamsOrigin.CONVERT_WHEN_MISSING, name:ResourceManager.getInstance().getString('account', 'flavor_cwm')},
				{value:VidiunAssetParamsOrigin.INGEST, name:ResourceManager.getInstance().getString('account', 'flavor_ingest')}
			];
			
			/**
			 * data provider for the asset's generation policy
			 * */
			private const _genOptions:Array = [
				{value:VidiunNullableBoolean.FALSE_VALUE, name:ResourceManager.getInstance().getString('account', 'gen_no_force')},
				{value:VidiunNullableBoolean.TRUE_VALUE, name:ResourceManager.getInstance().getString('account', 'gen_force')},
			];
			
			
			/**
			 * data provider for the asset's intermediate-flavor handling options
			 * */
			private const _handleOptions:Array = [
				{value:VidiunAssetParamsDeletePolicy.KEEP, name:ResourceManager.getInstance().getString('account', 'ifh_keep')},
				{value:VidiunAssetParamsDeletePolicy.DELETE, name:ResourceManager.getInstance().getString('account', 'ifh_delete')},
			];
			
			
			
			
			private var _cpap:VidiunConversionProfileAssetParams;
			
			
			[Bindable]
			/**
			 * does the account have DRM feature enabled 
			 * @internal
			 * (used by RnP)
			 * */
			public var isDrmEnabled:Boolean = true;
			

			[Bindable]
			public var profileName:String;

			/**
			 * flavor data
			 * */
			private var _flavorVO:FlavorVO;


			/**
			 * remove the popup
			 * */
			private function onClose():void {
				PopUpManager.removePopUp(this);
			}
			
//			override protected function resourcesChanged():void {
//				if (sysNameLabel) {
//					sysNameLabel.itemLabel.htmlText = resourceManager.getString('account','systemName');
//				}
//			}

			/**
			 * edit cpap and mark it as dirty
			 * */
			private function save():void {
				_cpap.deletePolicy = cbInterHandle.selectedItem.value;
				_cpap.forceNoneComplied = cbGenPolicy.selectedItem.value;
				_cpap.readyBehavior = cbAvailability.selectedItem.value;
				_cpap.origin = cbConvertPolicy.selectedItem.value;
				_cpap.systemName = tiSystemName.text;
				// when saving the profile, we look for the "dirty" attribute on the cpaps
				_cpap.dirty = true;
				onClose();
			}

			
			/**
			 * show the values from the cpap in the window
			 * */
			protected function setValues():void {
				if (cbAvailability && cbConvertPolicy && tiSystemName && cbGenPolicy && cbInterHandle) {
					// source flavor - always ingest, inherit
					if (_flavorVO.vFlavor.tags && _flavorVO.vFlavor.tags.indexOf("source") > -1) {
						_cpap.origin = VidiunAssetParamsOrigin.INGEST;
						if (_cpap.readyBehavior == int.MIN_VALUE) {
							_cpap.readyBehavior = VidiunFlavorReadyBehaviorType.INHERIT_FLAVOR_PARAMS;
						}
						cbConvertPolicy.enabled = false;
					}
					if (_flavorVO.vFlavor.id == 0) {
						cbGenPolicy.enabled = false;
						_cpap.forceNoneComplied = VidiunNullableBoolean.FALSE_VALUE;
					}
					// default values:
					if (_cpap.readyBehavior == int.MIN_VALUE) {
						_cpap.readyBehavior = VidiunFlavorReadyBehaviorType.OPTIONAL;
					}
					if (_cpap.origin == int.MIN_VALUE) {
						_cpap.origin = VidiunAssetParamsOrigin.CONVERT;
					}
					if (!_cpap.systemName) {
						_cpap.systemName = _flavorVO.vFlavor.systemName;
					}
					if (_cpap.forceNoneComplied == int.MIN_VALUE) {	// VidiunNullableBoolean is generated in the client as int
						_cpap.forceNoneComplied = VidiunNullableBoolean.FALSE_VALUE;
					}
					if (_cpap.deletePolicy == int.MIN_VALUE) {	
						_cpap.deletePolicy = VidiunAssetParamsDeletePolicy.KEEP;
					}
					cbAvailability.selectedIndex = getItemIndex(_availabilityOptions, _cpap.readyBehavior);
					cbConvertPolicy.selectedIndex = getItemIndex(_originOptions, _cpap.origin);
					cbGenPolicy.selectedIndex = getItemIndex(_genOptions, _cpap.forceNoneComplied);
					cbInterHandle.selectedIndex = getItemIndex(_handleOptions, _cpap.deletePolicy);
					tiSystemName.text = _cpap.systemName;
				}
			}
			
			
			/**
			 * @param ar	list of stuff
			 * @param value	the value we are looking for
			 * @return the index of the item whose "value" property equals <code>value</code>
			 * */
			protected function getItemIndex(ar:Array, value:*):int {
				for (var i:int = 0; i<ar.length; i++) {
					if (ar[i].value == value) {
						return i;
					}
				}
				return -1;
			}
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				if (_cpap) {
					setValues();
				}
				PermissionManager.getInstance().applyAllAttributes(this, "conversionFlavorDrilldown");
				if (flavorVO) {
					// if this is a live param, only system name is relevant
					if (flavorVO.vFlavor is VidiunLiveParams) {
						cbAvailability.includeInLayout = cbAvailability.visible = false;
						cbConvertPolicy.includeInLayout = cbConvertPolicy.visible = false;
						cbGenPolicy.includeInLayout = cbGenPolicy.visible = false;
						IFHWrap.includeInLayout = IFHWrap.visible = false;
					}
					else {
						IFHWrap.visible = IFHWrap.includeInLayout = getIFHandleVisible(flavorVO);
					}
				}
			}

			/**
			 * flavor data
			 * */
			public function get flavorVO():FlavorVO {
				return _flavorVO;
			}


			[Bindable]
			/**
			 * @private
			 * */
			public function set flavorVO(value:FlavorVO):void {
				_flavorVO = value;
			}

			/**
			 * the VidiunConversionProfileAssetParams being edited
			 */
			public function get cpap():VidiunConversionProfileAssetParams {
				return _cpap;
			}

			/**
			 * @private
			 */
			public function set cpap(value:VidiunConversionProfileAssetParams):void {
				_cpap = value;
				setValues();
			}




			protected function helpHandler(event:Event):void
			{
				dispatchEvent(new VmcHelpEvent(VmcHelpEvent.HELP, 'section_transcoding_flavor_edit'));
			}

			
			/**
			 * intermediate-flavor handling dropdown should only be visible when:
			 * <li> DRM is enabled for the account
			 * <li> the flavor being edited is not a DRM flavor (single or multi bitrate)
			 * */
			private function getIFHandleVisible(flavorVO:FlavorVO):Boolean {
				var result:Boolean = isDrmEnabled;
				if (result) {
					// originalObjectType is being set in FlavorParamsUtil.makeFlavorParams()
					if (flavorVO.vFlavor.hasOwnProperty('originalObjectType') 
						&& flavorVO.vFlavor.originalObjectType == 'VidiunWidevineFlavorParams') {
						result = false;
					}
					// this is another check for the same thing.
					else if (flavorVO.vFlavor.tags.indexOf("widevine") > -1) {
						// widevine flavors are marked either with "widevine" or with "widevine_mbr" tag
						result = false;
					}
				}
				return result;
			}
			
		]]>
	</mx:Script>
	<mx:Form id="form">
		<mx:FormItem label="{resourceManager.getString('account','convProfileName')}" >
			<mx:Text text="{profileName}" width="100%" />
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('account','convFlavorName')}" >
			<mx:Text text="{flavorVO.vFlavor.name}" width="100%"/>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('account','assetAvialability')}" 
					 visible="{cbAvailability.visible}" includeInLayout="{cbAvailability.includeInLayout}" >
			<mx:ComboBox id="cbAvailability" dataProvider="{_availabilityOptions}" 
						 labelField="name" width="{ELEMENT_WIDTH}" />
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('account','convertToFlavor')}"  
					 visible="{cbConvertPolicy.visible}" includeInLayout="{cbConvertPolicy.includeInLayout}">
			<mx:ComboBox id="cbConvertPolicy" dataProvider="{_originOptions}" 
						 labelField="name" width="{ELEMENT_WIDTH}" />
		</mx:FormItem>
		
		<mx:HBox visible="{tiSystemName.visible}" includeInLayout="{tiSystemName.includeInLayout}">
			<mx:Text htmlText="{resourceManager.getString('account','systemName')}" width="{form.maxLabelWidth + 5}"/>
			<mx:TextInput id="tiSystemName" width="{ELEMENT_WIDTH}" />
		</mx:HBox>
		
		<mx:FormItem label="{resourceManager.getString('account','generationPolicy')}" 
					 visible="{cbGenPolicy.visible}" includeInLayout="{cbGenPolicy.includeInLayout}">
			<mx:ComboBox id="cbGenPolicy" dataProvider="{_genOptions}" 
						 labelField="name" width="{ELEMENT_WIDTH}" />
		</mx:FormItem>
		<mx:FormItem id="IFHWrap" label="{resourceManager.getString('account','itermediate_handle')}" 
					 visible="{getIFHandleVisible(flavorVO)}" 
				 includeInLayout="{getIFHandleVisible(flavorVO)}">
			<mx:ComboBox id="cbInterHandle" dataProvider="{_handleOptions}" 
						 labelField="name" width="{ELEMENT_WIDTH}" />
		</mx:FormItem>
	</mx:Form>
	
	<mx:ControlBar width="100%" horizontalAlign="center">
		<mx:Button id="submitBtn" label="{resourceManager.getString('account','saveFlavor')}" useHandCursor="true"
				   buttonMode="true" click="save()"/>
	</mx:ControlBar>
</HelpTitleWindow>
