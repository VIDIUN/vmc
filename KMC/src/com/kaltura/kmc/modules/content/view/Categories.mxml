<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:controls="com.vidiun.controls.*"  
		 xmlns:fltr="com.vidiun.edw.components.fltr.*" 
		 xmlns:indicators="com.vidiun.edw.components.fltr.indicators.*" 
		 xmlns:bulkactions="com.vidiun.vmc.modules.content.view.controls.bulkactions.*" 
		 xmlns:categories="com.vidiun.vmc.modules.content.view.categories.*" 
		 xmlns:filter="com.vidiun.vmc.modules.content.view.categories.filter.*" 
		 implements="com.vidiun.vmc.modules.content.business.IContentPanel"
		 creationComplete="creationCompleteHandler(event)" enabled="{!filterModel.categoriesLocked}">


	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.events.GeneralNonCairngormEvent;
			import com.vidiun.edw.model.FilterModel;
			import com.vidiun.edw.model.types.WindowsStates;
			import com.vidiun.vmc.modules.content.events.CategoryEvent;
			import com.vidiun.vmc.modules.content.events.SelectionEvent;
			import com.vidiun.vmc.modules.content.events.WindowEvent;
			import com.vidiun.vmc.modules.content.model.CategoriesModel;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.types.VidiunAppearInListType;
			import com.vidiun.types.VidiunContributionPolicyType;
			import com.vidiun.types.VidiunInheritanceType;
			import com.vidiun.types.VidiunPrivacyType;
			import com.vidiun.vo.VidiunBaseEntryFilter;
			import com.vidiun.vo.VidiunCategory;
			import com.vidiun.vo.VidiunCategoryFilter;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;

			
			private var _isCreationComplete:Boolean;
			
			[Bindable]
			/**
			 * screen data
			 * */
			public var categoriesModel:CategoriesModel;

			[Bindable]
			/**
			 * filtering data
			 * */
			public var filterModel:FilterModel;

			[Bindable]
			/**
			 * entries-related data
			 * */
			public var entryDetailsModel:VMvCModel;


			/**
			 * initialize the panel.
			 * @param initFilter	filter for initial entry loading. (not relevant for this panel)
			 * */
			public function init(initFilter:VidiunBaseEntryFilter = null):void {
				if (!_isCreationComplete) {
					return;
				}
				if (this.enabled) {
					paging.selectedPage = 1;
					paging.pageSize = paging.rowInPageCb.value as int;
	
					if (filterModel.enableCustomData) {
						var listCategoryMetadata:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_METADATA_PROFILES);
						listCategoryMetadata.dispatch();
					}
	
					if (!filter.vidiunFilter) { 
						filter.vidiunFilter = new VidiunCategoryFilter();
					}
					loadCategories();
				}
				else {
					Alert.show(resourceManager.getString('cms', 'categoryPageLocked'), resourceManager.getString('cms', 'attention'));
				}
			}

			
			/**
			 * list categories according to current filter
			 * @param resetTree	if tre, category tree in filter is re-loaded
			 * */
			public function loadCategories(resetTree:Boolean = false):void {
				// dispatch event that will load data according to screen filter
				var cgEvent:CategoryEvent = new CategoryEvent(CategoryEvent.LIST_CATEGORIES);
				filter.vidiunFilter.orderBy = categoriesTable.orderBy;
				cgEvent.data = [filter.vidiunFilter, paging.vidiunFilterPager, resetTree];
				cgEvent.dispatch();
			}


			/**
			 * This is a new search called by an action on the filter vo
			 */
			private function newSearchFromFilter():void {
				paging.selectedPage = 1;
				loadCategories();
			}
			
			/* ============================================================================== */
			
			private function warnHandler(event:GeneralNonCairngormEvent, handler:Function, textKey:String):void
			{
				// set the single selected category  (event.data is VidiunCategory)
				var cgEvent:CairngormEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
				cgEvent.data = event.data;
				cgEvent.dispatch();
				
				var vCat:VidiunCategory = event.data as VidiunCategory;
				if (vCat.tags && vCat.tags.indexOf(CategoriesModel.EDIT_WARN_TAG) > -1) {
					var txt:String = resourceManager.getString('cms', textKey);
					var al:Alert = Alert.show(txt, resourceManager.getString('cms', 'attention'), Alert.YES|Alert.NO, null, handler);
					al.data = vCat;
				}
				else {
					var eventush:CloseEvent = new CloseEvent(CloseEvent.CLOSE, false, false, Alert.YES);
					this.data = vCat;
					this.addEventListener(CloseEvent.CLOSE, handler);
					dispatchEvent(eventush);
					this.removeEventListener(CloseEvent.CLOSE, handler);
				}
			}

			private function categoriesTable_moveCategoryHandler(event:CloseEvent):void {
				var cgEvent:CairngormEvent;
				if (event.detail == Alert.YES) {
					cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.MOVE_CATEGORY_WINDOW);
					cgEvent.dispatch();
				}
				else {
					// clear category selection from model
					cgEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
					cgEvent.data = null;
					cgEvent.dispatch();
				}
			}

			
			private function categoriesTable_deleteCategoryHandler(event:CloseEvent):void {
				var cgEvent:CairngormEvent;
				if (event.detail == Alert.YES) {
					var vCat:VidiunCategory = event.target.data as VidiunCategory;
					cgEvent = new CategoryEvent(CategoryEvent.DELETE_CATEGORIES);
					cgEvent.data = [[vCat.id], vCat.directSubCategoriesCount > 0];
					cgEvent.dispatch();
				}
				// clear category selection from model
				cgEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
				cgEvent.data = null;
				cgEvent.dispatch();
			}

			

			protected function categoriesTable_showDetailsHandler(event:CloseEvent):void
			{
				var cgEvent:CairngormEvent;
				if (event.detail == Alert.YES) {
					cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.CATEGORY_DETAILS_WINDOW);
					cgEvent.dispatch();
				}
				else {
					// clear category selection from model
					cgEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
					cgEvent.data = null;
					cgEvent.dispatch();
				}
			}
			
			/* ============================================================================== */
			
			private function categoriesTable_itemClickHandler(event:Event):void {
				// set the list of selected categories
				var et:CategoriesTable = event.target as CategoriesTable;
				var cgEvent:SelectionEvent = new SelectionEvent(SelectionEvent.CATEGORIES_SELECTION_CHANGED, et.selectedItems);
				cgEvent.dispatch();
			}
			

			protected function addCatBtn_clickHandler(event:MouseEvent):void
			{
				var cgEvent:CairngormEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
				cgEvent.data = createCategoryObject();
				cgEvent.dispatch();

				cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.CATEGORY_DETAILS_WINDOW);
				cgEvent.dispatch();
			}

			public static function createCategoryObject():VidiunCategory{
				var cat:VidiunCategory = new VidiunCategory();
				cat.privacy = VidiunPrivacyType.ALL;
				cat.appearInList = VidiunAppearInListType.PARTNER_ONLY;
				cat.contributionPolicy = VidiunContributionPolicyType.ALL;
				cat.inheritanceType = VidiunInheritanceType.MANUAL;

				return cat;
			}

			private function creationCompleteHandler(event:FlexEvent):void {
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
				_isCreationComplete = true;
				// there's an assumption that init was triggered before by Content.
				init();
			}


		]]>
	</mx:Script>

	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Label id="pageLabel" text="{resourceManager.getString('cms', 'categoriesPageTitle')}" styleName="filterTitleHeader" 
				  width="{filter.width}"/>
		<fltr:FreeTextSearch id="searchBox" styleName="searchHBox" width="{245}" height="{pageLabel.height}"
							 attribute="freeText" defaultText="{resourceManager.getString('cms', 'searchCategories')}"
							 helpAnchore="freetext_categories"/>
		<indicators:Indicators id="indicators" width="100%" height="60"
							   dataProvider="{filter.indicators}"
							   boxClicked="filter.removeFilter(event.data)"/>
		<mx:VBox styleName="noPadding">
			<mx:LinkButton click="loadCategories(true)" label="{resourceManager.getString('cms','refresh')}"
						   styleName="recycleIcon"/>
			<mx:Label text="{resourceManager.getString('filter', 'indicatorsLabel', [indicators.numExceeded])}" 
					  visible="{indicators.numExceeded > 0}" styleName="indicatorsLabel"/>
		</mx:VBox>
	</mx:HBox>
	
	<mx:HBox styleName="noPadding" horizontalGap="0" width="100%" height="100%">
		<mx:HDividedBox id="topContainer" width="100%" height="100%">
			<filter:CategoriesFilter id="filter" height="100%" width="245"  
									  freeTextSearch="{searchBox}" filterModel="{filterModel}"
									  metadataProfiles="{filterModel.categoryMetadataProfiles}"
									  context="{entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack}"
									  filterChanged="newSearchFromFilter()"/>

			<mx:VBox id="entryTableContainer" height="100%" width="100%" styleName="entriesTablePagerAndButtonsVbox">
				<categories:CategoriesTable id="categoriesTable" rowCount="10" width="100%" height="100%"
											 dataProvider="{categoriesModel.categoriesList}" 
											 orderByChanged="loadCategories()"
											 selectionChanged="categoriesTable_itemClickHandler(event)"
											 moveCategory="warnHandler(event, categoriesTable_moveCategoryHandler, 'moveCategoryWarning')"
											 deleteCategory="warnHandler(event, categoriesTable_deleteCategoryHandler, 'deleteCategoryWarning')"
											 showDetails="warnHandler(event, categoriesTable_showDetailsHandler, 'editCategoryWarning')"/>

				<mx:HBox width="100%" styleName="noPadding" horizontalGap="0">
					<bulkactions:BulkCategoryActionsMenu id="bulkActions" height="{paging.height}" />

					<controls:Paging id="paging" width="100%" styleName="paging" totalCount="{categoriesModel.totalCategories}"
									 rowsInPageChange="loadCategories()" nextPage="loadCategories()" prvPage="loadCategories()"
									 getPageNum="loadCategories()" />

				</mx:HBox>
			</mx:VBox>
		</mx:HDividedBox>
		<mx:VBox styleName="listActionsBox" height="100%" id="actionsBox">
			<mx:Button id="addCatBtn" label="{resourceManager.getString('cms', 'addNewCat')}" 
					   styleName="listActionButton" buttonMode="true"
					   click="addCatBtn_clickHandler(event)" />
		</mx:VBox>
	</mx:HBox>
</mx:VBox>
