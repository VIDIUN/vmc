<?xml version="1.0" encoding="utf-8"?>
<HelpTitleWindow xmlns="com.vidiun.containers.*" layout="vertical"
				 title="{resourceManager.getString('cms', 'setSchedulingTitle')}"
				 xmlns:mx="http://www.adobe.com/2006/mxml" showCloseButton="true" close="closeWindow(event)"
				 help="onHelp(event)" xmlns:view="com.vidiun.edw.view.*" >

	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.analytics.GoogleAnalyticsConsts;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTrackerConsts;
			import com.vidiun.edw.business.Cloner;
			import com.vidiun.edw.business.IDrilldownPanel;
			import com.vidiun.edw.constants.PanelConsts;
			import com.vidiun.edw.model.datapacks.ContextDataPack;
			import com.vidiun.edw.model.util.CompositeVBaseEntry;
			import com.vidiun.edw.view.panels.PanelLoader;
			import com.vidiun.edw.view.panels.PanelMetadataParser;
			import com.vidiun.edw.view.panels.PanelMetadataVO;
			import com.vidiun.vmc.events.VmcHelpEvent;
			import com.vidiun.vmc.modules.content.events.EntriesEvent;
			import com.vidiun.vmc.modules.content.events.WindowEvent;
			import com.vidiun.types.VidiunStatsVmcEventType;
			import com.vidiun.vo.VidiunBaseEntry;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;

			/**
			 * application context
			 * */
			public var context:ContextDataPack;
			
			/**
			 * @copy #selectedEntries
			 * */
			private var _selectedEntries:ArrayCollection;
			
			private var _clonedSelectedEntries:ArrayCollection;

			/**
			 * scheduling panel, loaded as module
			 * */
			private var _entrySched:IDrilldownPanel;
			
			
			/**
			 * close the window
			 * */
			private function closeWindow(event:Event = null):void {
				var cgEvent:WindowEvent = new WindowEvent(WindowEvent.CLOSE);
				cgEvent.dispatch();
			}


			/**
			 * save the changes:
			 * */
			private function saveData(event:Event):void {
				if (_entrySched != null){

					var startTime:int = _entrySched["getStartTime"]();
					var endTime:int = _entrySched["getEndTime"]();
					
					for each (var entry:VidiunBaseEntry in _clonedSelectedEntries) {
						if (entry.startDate > 0) {
							entry.startDate = (startTime > 0) ? startTime : VidiunClient.NULL_INT;
						}
						else if (startTime > 0) {
							// was not set before and is set now
							entry.startDate =  startTime;
						}
						
						if (entry.endDate > 0) {
							entry.endDate = (endTime > 0) ? endTime : VidiunClient.NULL_INT;
						}
						else if (endTime > 0) {
							// was not set before and is set now
							entry.endDate =  endTime;
						}
					}
					
					// update entries:
					var cgEvent:EntriesEvent = new EntriesEvent(EntriesEvent.UPDATE_ENTRIES, _clonedSelectedEntries, false);
					cgEvent.dispatch();
	
					// stats:
					for each (var etr:Object in _clonedSelectedEntries) {
						VAnalyticsTracker.getInstance().sendEvent(VAnalyticsTrackerConsts.CONTENT, VidiunStatsVmcEventType.CONTENT_EDIT_ENTRY, "setSchedulingForEntries", etr.id);
					}
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_SET_SCHEDULING, GoogleAnalyticsConsts.CONTENT);
				}
				closeWindow();
			}
			
			override protected function createChildren():void{
				super.createChildren();
				
				// if Panel Loader not yet initialised
				try {
					PanelLoader.instance;
				} 
				catch (e:IllegalOperationError) {
					var panelDataVO:PanelMetadataVO = PanelMetadataParser.parse(context.panelsConfig);
					PanelLoader.initialize(panelDataVO, context.sourceUrl);
				}
				// create scheduling panel
				PanelLoader.instance.createPanel(PanelConsts.SCHEDULING_PANEL, onPanelCreated);
			}
			
			protected function onHelp(event:Event):void {
				dispatchEvent(new VmcHelpEvent(VmcHelpEvent.HELP, 'section_bulk_sched'));
			}


			/**
			 * a list of entries to edit
			 * */
			public function set selectedEntries(arr:ArrayCollection):void {
				_selectedEntries = arr;
			}
			
			
			/**
			 * PanelLoader finished loading the panel
			 * */
			private function onPanelCreated(panel:IDrilldownPanel):void	{
				_entrySched = panel;
				_entrySched.addEventListener(FlexEvent.CREATION_COMPLETE, onPanelReady);
				addChildAt(_entrySched as DisplayObject, 1);
			}
			
			
			/**
			 * the panel is fully created and ready for interaction
			 * */
			private function onPanelReady(e:Event):void {
				_entrySched.removeEventListener(FlexEvent.CREATION_COMPLETE, onPanelReady);
				_entrySched.init();
				addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
			}
			
			
			protected function onUpdateComplete(event:FlexEvent):void{
				removeEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
				
				// we edit dummy entries, not the original 
				_clonedSelectedEntries = new ArrayCollection();
				for (var i:int = 0; i < _selectedEntries.length; i++) {
					_clonedSelectedEntries.addItem(Cloner.cloneVidiunBaseEntry(_selectedEntries[i]));
				}
				
				var entryVect:Vector.<VidiunBaseEntry> = Vector.<VidiunBaseEntry>(_clonedSelectedEntries.source);
				var compositeEntry:CompositeVBaseEntry = new CompositeVBaseEntry(entryVect);
				
				_entrySched.selectedEntry = compositeEntry;
				
				_entrySched.initData();
			}
			


		]]>
	</mx:Script>
	<mx:Label text="{resourceManager.getString('cms', 'schedulingOverrideMsg')}"/>
	<mx:ControlBar width="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2"
				   paddingTop="2">
		<mx:Button label="{resourceManager.getString('cms', 'applySechdulingBtn')}" useHandCursor="true"
				   buttonMode="true" click="saveData(event)"/>
	</mx:ControlBar>
</HelpTitleWindow>
