<?xml version="1.0" encoding="utf-8"?>
<panels:AdditionalFilter xmlns:mx="http://www.adobe.com/2006/mxml" 
						 xmlns:panels="com.vidiun.edw.components.fltr.panels.*"
						 creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.vidiun.types.VidiunCategoryUserPermissionLevel;
			
			import mx.events.FlexEvent;
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_buttons = [allBtn, memberBtn, contBtn, modBtn, managerBtn];
//				friendlyName = resourceManager.getString('cms', '');
				// friendly name is only used for indicators, not required here
			}
			
			
			/**
			 * return a string that represents the result of selecting "all" button.
			 * */
			public static function getEmptyFilterString():String {
				var levelString:String = VidiunCategoryUserPermissionLevel.MEMBER + ",";
				levelString += VidiunCategoryUserPermissionLevel.CONTRIBUTOR + ",";
				levelString += VidiunCategoryUserPermissionLevel.MODERATOR + ",";
				levelString += VidiunCategoryUserPermissionLevel.MANAGER;
				return levelString;
			}
			
			override public function get filter():Object {
				var levelString:String = "";
				//if non of the items are selected or all selected
				if ((memberBtn.selected && contBtn.selected && modBtn.selected && managerBtn.selected) 
					|| (!memberBtn.selected && !contBtn.selected && !modBtn.selected && !managerBtn.selected)) {
					//levelString = "";  // we only want the following permissions levels, not all:
					levelString = getEmptyFilterString();
				}
				else {
					if (memberBtn.selected) {
						levelString += VidiunCategoryUserPermissionLevel.MEMBER + ",";
					}
					if (contBtn.selected) {
						levelString += VidiunCategoryUserPermissionLevel.CONTRIBUTOR + ",";
					}
					if (modBtn.selected) {
						levelString += VidiunCategoryUserPermissionLevel.MODERATOR + ",";
					}
					if (managerBtn.selected) {
						levelString += VidiunCategoryUserPermissionLevel.MANAGER + ",";
					}
					//remove last , 
					levelString = levelString.slice(0, levelString.length - 1);
				}
				return levelString;
			}
			
			override public function set filter(value:Object):void {
				if (!value) {
					// no filter 
					allBtn.selected = true;
					memberBtn.selected = false;
					contBtn.selected = false;
					modBtn.selected = false;
					managerBtn.selected = false;
				}
				else {
					//set all to unselected
					allBtn.selected = false;
					
					var arr:Array = value.split(',');
					for each (var code:String in arr) {
						switch (code) {
							case VidiunCategoryUserPermissionLevel.MEMBER:
								memberBtn.selected = true;
								break;
							
							case VidiunCategoryUserPermissionLevel.CONTRIBUTOR:
								contBtn.selected = true;
								break;
							
							case VidiunCategoryUserPermissionLevel.MODERATOR:
								modBtn.selected = true;
								break;
							
							case VidiunCategoryUserPermissionLevel.MANAGER:
								managerBtn.selected = true;
								break;
						}
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:CheckBox id="allBtn" width="100%" label="{resourceManager.getString('cms', 'permLvlAll')}"
				 selected="true" click="onDynamicTitleClicked(event)" styleName="mainFilterGroupButton"/>
	<mx:CheckBox id="memberBtn" width="100%" label="{resourceManager.getString('cms', 'permLvlMember')}"
				 click="onDynamicMemberClicked(event)" styleName="innerFilterGroupButton"/>
	<mx:CheckBox id="contBtn" width="100%" label="{resourceManager.getString('cms', 'permLvlContributor')}"
				 click="onDynamicMemberClicked(event)" styleName="innerFilterGroupButton"/>
	<mx:CheckBox id="modBtn" width="100%" label="{resourceManager.getString('cms', 'permLvlModerator')}"
				 click="onDynamicMemberClicked(event)" styleName="innerFilterGroupButton"/>
	<mx:CheckBox id="managerBtn" width="100%" label="{resourceManager.getString('cms', 'permLvlManager')}"
				 click="onDynamicMemberClicked(event)" styleName="innerFilterGroupButton"/>
</panels:AdditionalFilter>
