<?xml version="1.0" encoding="utf-8"?>
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" styleName="noVGap"
		   implements="com.vidiun.edw.business.IDrilldownPanel"
		   xmlns:controls="com.vidiun.controls.*" 
		   xmlns:et="com.vidiun.edw.components.et.*" xmlns:control="com.vidiun.edw.control.*"
		   label="{resourceManager.getString('drilldown', 'mixesTab')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.vidiun.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.vidiun.edw.events.InternalVedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.vidiun.analytics.GoogleAnalyticsConsts;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTrackerConsts;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.components.et.EntryTableColumns;
			import com.vidiun.edw.constants.PanelConsts;
			import com.vidiun.edw.control.events.VedEntryEvent;
			import com.vidiun.edw.events.InternalVedEvent;
			import com.vidiun.edw.events.ValidationResultEvent;
			import com.vidiun.edw.model.datapacks.ContentDataPack;
			import com.vidiun.edw.model.datapacks.EntryDataPack;
			import com.vidiun.vmvc.model.IDataPackRepository;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.types.VidiunStatsVmcEventType;
			import com.vidiun.vo.VidiunBaseEntry;
			import com.vidiun.vo.VidiunLiveStreamEntry;
			import com.vidiun.vo.VidiunMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;

			[Bindable]
			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:VidiunBaseEntry;

			private var _model:ContentDataPack;

			/**
			 * to watch when <code>selectedEntry.parts</code> change
			 * */
			private var _cw:ChangeWatcher;

			/**
			 * whether we should load roughcuts
			 * */
			public var loadRoughcuts:Boolean = true;

			private var _dpModel:IDataPackRepository;

			public function get selectedEntry():VidiunBaseEntry {
				return _selectedEntry;
			}


			public function set selectedEntry(value:VidiunBaseEntry):void {
				_selectedEntry = value;

				var resourceName:String = (_selectedEntry is VidiunMixEntry) ? 'content' : 'mixesTab';
				label = resourceManager.getString('drilldown', resourceName);
			}

			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				var edp:EntryDataPack = _dpModel.getDataPack(EntryDataPack) as EntryDataPack;
				loadRoughcuts = edp.loadRoughcuts;
			}

			public function get helpAnchor():String{
				return "entry_content";
			}


			public function validate():void {
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, true);
				dispatchEvent(e);
			}


			public function save():void {
				dispatchEvent(new InternalVedEvent(InternalVedEvent.PANEL_DATA_SAVED));
			}


			public function clear():void {
				var e:VedEntryEvent = new VedEntryEvent(VedEntryEvent.RESET_PARTS, null);
				controller.dispatch(e);
			}


			public function isChanged():Boolean {
				return false;
			}


			public function initData():void {
				// get data
				loadEntries();
			}


			public function init():void {
				// monitor data change if needed
				if (!_cw) {
					var e:VedEntryEvent = new VedEntryEvent(VedEntryEvent.RESET_PARTS, null);
					controller.dispatch(e);
					_model = VMvCModel.getInstance().getDataPack(ContentDataPack) as ContentDataPack;
					_cw = BindingUtils.bindSetter(removeTab, _model, "contentParts");
				}

				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.CONTENT_PANEL);
			}

			public function destroy():void {
				_cw.unwatch();
			}

			private function onPaging():void {
				loadEntries();
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE, GoogleAnalyticsConsts.CONTENT);
				VAnalyticsTracker.getInstance().sendEvent(VAnalyticsTrackerConsts.CONTENT, VidiunStatsVmcEventType.CONTENT_CONTENT_GO_TO_PAGE, "content>Show Rows");
			}

			/**
			 * load all mix entries or load mixes that uses this entry if it is not a mix
			 */
			private function loadEntries():void {
				if (_selectedEntry is VidiunMixEntry) {
					//get all mix entries
					var cgEvent:VedEntryEvent = new VedEntryEvent(VedEntryEvent.GET_ALL_ENTRIES, _selectedEntry);
					controller.dispatch(cgEvent);
				} 
				else if (loadRoughcuts && !(_selectedEntry is VidiunLiveStreamEntry)) {
					//get all entries that uses this mix 
					var getRoughcuts:VedEntryEvent = new VedEntryEvent(VedEntryEvent.GET_ENTRY_ROUGHCUTS, _selectedEntry);
					controller.dispatch(getRoughcuts);
				}

			}

			/**
			 * remove column that are not relevant for
			 * this view from the entry contents table
			 * */
			private function removeColumns(event:Event):void {
				var ar:Array = [EntryTableColumns.THUMBNAIL, EntryTableColumns.NAME, EntryTableColumns.PLAYS,
					EntryTableColumns.CREATE_AT, EntryTableColumns.DURATION, EntryTableColumns.STATUS];

				table.showColumns(ar);
			}

			private function removeTab(value:Array):void {
				if (value) {
					if (value.length == 0 && this.parent) {
						this.parent.removeChild(this);
						return;
					}
				}
				table.dataProvider = value;
			}
		]]>
	</mx:Script>
	<control:ContentTabController id="controller" />
	<et:EntryTable id="table" width="100%" height="100%" creationComplete="{removeColumns(event)}"
				   sortableColumns="false" showLinks="false" showSelection="false"/>
	<controls:Paging id="paging" width="100%" nextPage="onPaging()" prvPage="onPaging()" 
					 getPageNum="onPaging()" showRowsInPage="false"/>
</mx:Module>
