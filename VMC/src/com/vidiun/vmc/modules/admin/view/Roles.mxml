<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.vidiun.vmc.modules.admin.view.*"
		 xmlns:controls="com.vidiun.controls.*" width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)"
		 implements="com.vidiun.vmc.modules.admin.view.IAdminSubtab">
	<mx:Metadata >
		[Event(name="enableHeader",type="com.vidiun.vmc.modules.admin.control.events.GeneralEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.vidiun.analytics.GoogleAnalyticsConsts;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.vmc.events.VmcNavigationEvent;
			import com.vidiun.vmc.modules.admin.control.events.DrilldownEvent;
			import com.vidiun.vmc.modules.admin.control.events.GeneralEvent;
			import com.vidiun.vmc.modules.admin.control.events.ListItemsEvent;
			import com.vidiun.vmc.modules.admin.control.events.RoleEvent;
			import com.vidiun.vmc.modules.admin.model.DrilldownMode;
			import com.vidiun.vmc.modules.admin.model.RolesModel;
			import com.vidiun.vo.VidiunFilterPager;
			import com.vidiun.vo.VidiunUserRole;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			/**
			 * permissions that all VMC roles must have and are not edited via role edit form
			 * */
			public static const DEFAULT_VMC_PERMISSIONS:String = 'VMC_ACCESS,VMC_READ_ONLY,BASE_USER_SESSION_PERMISSION,WIDGET_SESSION_PERMISSION';
			
			[Bindable]
			public var model:RolesModel;
			[Bindable]
			public var isLoading:Boolean;
			
			/**
			 * a popup window with role details
			 * */
			protected var _roleDrilldown:RoleDrilldown;
			
			
			/**
			 * bind setters and apply permissions
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				BindingUtils.bindSetter(onDrilldownStateChange, model, "drilldownMode");
				BindingUtils.bindSetter(onNewRoleChanged, model, "newRole");
				//				BindingUtils.bindSetter(onRolesListChange, model, "roles");
				PermissionManager.getInstance().applyAllAttributes(this,id);
			}
			
			//			/**
			//			 * if a user drilldown window is opened, update its roles list.
			//			 * */
			//			protected function onRolesListChange(value:ArrayCollection):void {
			//				tableHBox.height = (table.rowHeight * 10) + table.headerHeight + 10;
			//				superTanker.height = tableHBox.height + paging.height;
			//			}
			
			private function onNavigate(event:VmcNavigationEvent):void
			{
				// close drilldown 
				closeRoleDrilldown(null);
				// navigate
				dispatchEvent(new VmcNavigationEvent(event.type, event.module, event.subtab, event.data, event.bubbles, event.cancelable));
			}
			
			/**
			 * refresh subtab data
			 * */
			public function refreshData():void {
				listRoles(1);
				var cge:CairngormEvent;
				if (!model.partnerPermissions) {
					cge = new ListItemsEvent(ListItemsEvent.LIST_PARTNER_PERMISSIONS);
					cge.dispatch();
				}
				// reset selected user
				cge = new RoleEvent(RoleEvent.SELECT_ROLE, null);
				cge.dispatch();
			}
			
			/**
			 * dispatch Cairngorm event to raise a list roles command 
			 * */
			protected function listRoles(pageNumber:int):void {
				// list
				var vfp:VidiunFilterPager = new VidiunFilterPager();
				if (paging && paging.vidiunFilterPager.pageSize != int.MIN_VALUE) {
					vfp.pageSize = paging.vidiunFilterPager.pageSize;
				}
				else {
					vfp.pageSize = 25;
				}
				if (pageNumber) {
					vfp.pageIndex = pageNumber;
				}
				else if (paging) {
					vfp.pageIndex = paging.vidiunFilterPager.pageIndex;
				}
				else {
					vfp.pageIndex = 1;
				}
				
				var ce:ListItemsEvent;
				ce = new ListItemsEvent(ListItemsEvent.LIST_ROLES, model.rolesFilter, vfp);
				ce.dispatch();
			}
			
			
			/**
			 * load users according to paging component value
			 * */
			protected function gotoPage():void {
				listRoles(paging.selectedPage);
			}
			
			
			/**
			 * get the edited user and update server
			 * */
			protected function saveRoleData(e:Event):void {
				var ue:RoleEvent;
				// need to know if new user or update user.
				if (model.drilldownMode == DrilldownMode.ADD) {
					// add user
					ue = new RoleEvent(RoleEvent.ADD_ROLE, _roleDrilldown.role);
				}
				else if (model.drilldownMode == DrilldownMode.EDIT) {
					// edit user
					ue = new RoleEvent(RoleEvent.UPDATE_ROLE, _roleDrilldown.role);
				}
				ue.dispatch();
			}
			
			/**
			 * re-load data, close popup, etc.
			 * */
			protected function onDrilldownStateChange(value:String):void {
				switch (value) {
					case DrilldownMode.ADD:
					case DrilldownMode.EDIT:
						// do nothing
						break;
					case DrilldownMode.NONE:
						if (_roleDrilldown) {	// as in - not intial binding
							// if we got here, data save completed successfuly
							closeRoleDrilldown(null);
							refreshData();
						}
						break;
				}
			}
			
			
			/**
			 * hides and destroys the role drilldown window
			 * */
			protected function closeRoleDrilldown(e:Event):void {
				if (_roleDrilldown) {
					PopUpManager.removePopUp(_roleDrilldown);
					_roleDrilldown.removeEventListener(UserDrilldown.SAVE, saveRoleData);
					_roleDrilldown.removeEventListener(UserDrilldown.CLOSE, closeRoleDrilldown);
					_roleDrilldown.removeEventListener(VmcNavigationEvent.NAVIGATE, onNavigate);
					_roleDrilldown = null;
					var de:DrilldownEvent = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.NONE);
					de.dispatch();
					dispatchEvent(new GeneralEvent("enableHeader", true));
				}
			}
			
			
			/**
			 * open drilldown window with data of currently selected user
			 * @return the newly created popup window
			 * */
			protected function drillToSelectedRole():RoleDrilldown {
				var rd:RoleDrilldown = new RoleDrilldown();
				BindingUtils.bindProperty(rd, "isLoading", this, "isLoading");
				rd.init(model.selectedRole, model.drilldownMode, model.partnerPermissionsUiconf, model.partnerPermissions, model.roles);
				rd.addEventListener(RoleDrilldown.SAVE, saveRoleData);
				rd.addEventListener(RoleDrilldown.CLOSE, closeRoleDrilldown);
				rd.addEventListener(VmcNavigationEvent.NAVIGATE, onNavigate);
				//				rd.addEventListener(VmcHelpEvent.HELP, onHelpClickedInDrilldown);
				PopUpManager.addPopUp(rd, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(rd);
				dispatchEvent(new GeneralEvent("enableHeader", false));
				return rd;
			}
			
			//			protected function onHelpClickedInDrilldown (e : VmcHelpEvent) : void
			//			{
			//				dispatchEvent(new VmcHelpEvent(VmcHelpEvent.HELP, e.anchor));
			//			}
			
			/**
			 * show the "add user" dialog
			 * */
			protected function openAddRoleDialog(event:MouseEvent):void {
				// set the selected user to a new VidiunUser.
				var vur:VidiunUserRole = new VidiunUserRole();
				vur.tags = 'vmc';
				vur.permissionNames = Roles.DEFAULT_VMC_PERMISSIONS;
				var ce:CairngormEvent = new RoleEvent(RoleEvent.SELECT_ROLE, vur);
				ce.dispatch();
				
				ce = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.ADD);
				ce.dispatch();
				
				// open drilldown for this role
				_roleDrilldown = drillToSelectedRole();
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.ADMIN_ROLE_ADD);
			}
			
			
			/**
			 * show the "edit user" dialog
			 * */
			protected function openEditRoleDialog(event:Event):void {
				var ce:DrilldownEvent = new DrilldownEvent(DrilldownEvent.ROLES_SET_STATE, DrilldownMode.EDIT);
				ce.dispatch();
				_roleDrilldown = drillToSelectedRole();
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.ADMIN_ROLE_EDIT);
			}
			
			
			/**
			 * duplicate selected role
			 * */
			protected function duplicateRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.DUPLICATE_ROLE, model.selectedRole);
				ce.dispatch();
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.ADMIN_ROLE_DUPLICATE);
			}
			
			/**
			 * delete selected role
			 * */
			protected function deleteRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.DELETE_ROLE, model.selectedRole);
				ce.dispatch();
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PAGE_VIEW + GoogleAnalyticsConsts.ADMIN_ROLE_DELETE);
			}
			
			
			/**
			 * select a role
			 * */
			protected function setSelectedRole(event:Event):void {
				var ce:RoleEvent = new RoleEvent(RoleEvent.SELECT_ROLE, table.selectedRole);
				ce.dispatch();
			}
			
			/**
			 * open drilldown for the selected role.
			 * 
			 * */
			protected function onNewRoleChanged(value:VidiunUserRole):void {
				if (value) {
					openEditRoleDialog(null);
				}
			}
			
			
		]]>
	</mx:Script>
	
	
	<mx:Label text="{ResourceManager.getInstance().getString('admin', 'roles_tab')}" styleName="filterTitleHeader"/>
	
	<mx:Label text="{ResourceManager.getInstance().getString('admin', 'roles_page_description')}" styleName="pageDescription"/>
	
	<mx:HBox width="100%" height="100%" id="superTanker" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:VBox id="tableContainer" width="100%" styleName="noVGap" height="100%">
			<mx:HBox id="tableHBox" width="100%" height="100%">
				<view:RolesTable id="table" height="100%" width="100%" dataProvider="{model.roles}" 
								 drillDown="openEditRoleDialog(event)" deleteRole="deleteRole(event)" 
								 duplicateRole="duplicateRole(event)" selectRole="setSelectedRole(event)" sortableColumns="{false}"/>
			</mx:HBox>
			<controls:Paging id="paging" width="100%" styleName="paging" nextPage="gotoPage()"
							 prvPage="gotoPage()" getPageNum="gotoPage()" rowsInPageChange="gotoPage()"
							 showRowsInPage="true" totalCount="{model.totalRoles}" />
		</mx:VBox>
		
		<mx:VBox id="actionButtonsContainer" styleName="blueBox" height="100%" horizontalAlign="left">
			<mx:Button id="addBtn" label="{resourceManager.getString('admin','add_role')}" styleName="addPlst" width="100%"
					   height="30" buttonMode="true" click="openAddRoleDialog(event)"/>
		</mx:VBox>
	</mx:HBox>
</mx:VBox>
