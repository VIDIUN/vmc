<?xml version="1.0" encoding="utf-8"?>
<containers:ConfinedTitleWindow xmlns:containers="com.vidiun.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="650" height="520"
				styleName="TitleWindowType2" 
				showCloseButton="true" close="titlewindow1_closeHandler(event)"
				layout="vertical" title="{resourceManager.getString('analytics', 'previewEntryWindowTitle')}"
				creationComplete="titlewindow1_creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.vidiun.vmc.business.JSGate;
			import com.vidiun.vmc.modules.analytics.model.Context;
			import com.vidiun.utils.VPlayerUtil;
			import com.vidiun.vo.VidiunBaseEntry;
			import com.vidiun.vo.VidiunMediaEntry;
			
			import mx.controls.SWFLoader;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			[Bindable] public static var vdp:SWFLoader;
			
			//inoreder of loading the vdp you must pass a context
			[Bindable] public var context:Context; 
			
			//the entry id you preview
			[Bindable] public var entry:VidiunBaseEntry;
			
			//the entry id you preview
			[Bindable] public var uiconfId:String;
			
			private const _lblWidth : Number = 140;
			
			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				disposeAll();
				PopUpManager.removePopUp(this);
				JSGate.maskHeader(true);
			}
			
			protected function disposeAll() : void
			{
				/*if(vdp && vdp.content)
				{
					if(vdp.content.hasEventListener("vdpReady"))
						vdp.content.removeEventListener("vdpReady", showVdp);
					if(vdp.content.hasEventListener("entryReady"))
						vdp.content.removeEventListener("entryReady", showVdp);
				
					if(vdp.content.hasEventListener("mediaReady"))
						vdp.content.removeEventListener("mediaReady", showVdp);
				}*/
				
				cleanMedia();
			}
			
			protected function showVdp( event : Event ) : void
			{
				vdpSection.visible = true;
				//data = vdp.content['evaluate']('{mediaProxy.entry}');
			}
			
			/**
			 * send to the VDP clean media if exist
			 * */
			protected function cleanMedia() : void
			{
				if (vdp && vdp.content)
					vdp.content["sendNotification"]('cleanMedia');
			}
			
			/**
			 * add VDP to the stage
			 * */
			private function addVDP():void {
				
				//hide until it loads due to VDP bug that it can't center the preloader
				
				
				if (!vdp) {
					vdp = new SWFLoader();
					vdp.width = 560;
					vdp.height = 315;
					vdp.loaderContext = new LoaderContext(false, new ApplicationDomain());
					vdp.addEventListener(Event.INIT, onVDP3Loaded);
					var vdpUrl:String = context.protocol + context.rootUrl + "/index.php/vwidget/wid/_" + context.partnerId + "/uiconf_id/" + uiconfId + "/nowrapper/1/";
					vdp.source = vdpUrl;
					vdp.scaleContent = false;
					vdpSection.addChildAt(vdp, 0);
					vdpSection.visible = false;

				}
				else if (!vdpSection.contains(vdp)) {
					vdpSection.addChildAt(vdp, 0);
					vdp.content["sendNotification"]('changeMedia', {entryId: entry.id});
				}
				else {
					vdp.content["sendNotification"]('changeMedia', {entryId: entry.id});
				}
			}
			
			/**
			 * Vdp loaded
			 */
			private function onVDP3Loaded(event:Event):void { 
				
				if(!vdp.content.hasEventListener("entryReady"))
					vdp.content.addEventListener("entryReady", showVdp);
				
				if(!vdp.content.hasEventListener("vdpReady"))
					vdp.content.addEventListener("vdpReady", showVdp);
				
				if(!vdp.content.hasEventListener("mediaReady"))
					vdp.content.addEventListener("mediaReady", showVdp); 
				
				var params:Object = new Object();
				params.entryId = entry.id;
				params.vs = context.vs;
				params.partnerId = context.partnerId;
				params.subpId = context.subpId;
				params.cdnHost = context.cdnHost;
				params.host = context.hostName;
				params.allowCookies = true;
				
				params = VPlayerUtil.overrideStrings(params);
				params = VPlayerUtil.overrideElementStrings(params);
				
				if (context.debugMode)
					params.debugMode = "true";
				
				// set flashvars
				event.target.content["flashvars"] = params;
				
				// start the loading sqeunce of the vdp 
				event.target.content["init"]();
			}


			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				this.mx_internal::closeButton.buttonMode = true;
				addVDP();
			}

		]]>
	</mx:Script>
	<mx:Label text="{resourceManager.getString('analytics','loading')}" visible="{!vdpSection.visible}" includeInLayout="{!vdpSection.visible}"/>
	<mx:HBox id="vdpSection" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
		
	</mx:HBox>
	<mx:VBox width="100%">
		<mx:HBox width="100%" >
			<mx:Label text="{resourceManager.getString('analytics','name_entry')}:" width="{_lblWidth}" styleName="boldLabel"/>
			<mx:Text width="100%" text="{entry.name}" />
		</mx:HBox>
		<mx:HBox width="100%" >
			<mx:Label text="{resourceManager.getString('analytics','description')}:" width="{_lblWidth}" styleName="boldLabel"/>
			<mx:Text width="100%" text="{entry.description}" />
		</mx:HBox>
		<mx:HBox width="100%" >
			<mx:Label text="{resourceManager.getString('analytics','tags')}:" width="{_lblWidth}" styleName="boldLabel"/>
			<mx:Text width="100%" text="{entry.tags}" />
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('analytics','adminOwner')}:" width="{_lblWidth}" styleName="boldLabel"/>
			<mx:Text width="100%" text="{entry.userId}"/>
		</mx:HBox>
	</mx:VBox>
</containers:ConfinedTitleWindow>
