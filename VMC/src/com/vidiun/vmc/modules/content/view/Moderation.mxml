<?xml version="1.0" encoding="utf-8"?>
<!---
	 "Moderate" section of the content viewstack.
	 allows moderating flagged entries.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" hide="hideHandler()" verticalScrollPolicy="off"
		 creationComplete="onRequestedDataLoaded()"
		 implements="com.vidiun.vmc.modules.content.business.IContentPanel,com.vidiun.edw.business.IDataOwner"
		 xmlns:et1="com.vidiun.edw.components.et.*" xmlns:controls="com.vidiun.controls.*"
		 xmlns:fltr="com.vidiun.edw.components.fltr.*" xmlns:indicators="com.vidiun.edw.components.fltr.indicators.*"
		 xmlns:business="com.vidiun.vmc.modules.content.business.*"
		 xmlns:bulkactions="com.vidiun.vmc.modules.content.view.controls.bulkactions.*">

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.vidiun.analytics.GoogleAnalyticsConsts;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTrackerConsts;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.components.et.EntryTableColumns;
			import com.vidiun.edw.components.et.events.EntryTableEvent;
			import com.vidiun.edw.control.VedController;
			import com.vidiun.edw.control.events.LoadEvent;
			import com.vidiun.edw.model.FilterModel;
			import com.vidiun.edw.model.datapacks.ContextDataPack;
			import com.vidiun.edw.model.datapacks.DistributionDataPack;
			import com.vidiun.edw.vo.DistributionInfo;
			import com.vidiun.edw.vo.ListableVo;
			import com.vidiun.events.VdpEventTypes;
			import com.vidiun.vmc.modules.content.events.VMCEntryEvent;
			import com.vidiun.vmc.modules.content.events.VMCSearchEvent;
			import com.vidiun.vmc.modules.content.events.ModerationsEvent;
			import com.vidiun.vmc.modules.content.events.SetListableEvent;
			import com.vidiun.vmc.modules.content.events.UserEvent;
			import com.vidiun.vmc.modules.content.model.ModerationModel;
			import com.vidiun.vmc.modules.content.vo.UserVO;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.types.VidiunEntryModerationStatus;
			import com.vidiun.types.VidiunEntryStatus;
			import com.vidiun.types.VidiunMediaEntryOrderBy;
			import com.vidiun.types.VidiunStatsVmcEventType;
			import com.vidiun.utils.VPlayerUtil;
			import com.vidiun.vo.VidiunBaseEntry;
			import com.vidiun.vo.VidiunBaseEntryFilter;
			import com.vidiun.vo.VidiunMediaEntryFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;


			// ===============================================
			// fields
			// ===============================================

			private var _entryDetailsModel:VMvCModel;


			[Bindable]
			public function set entryDetailsModel(value:VMvCModel):void {
				_entryDetailsModel = value;
				if (_disProfWatcher) {
					_disProfWatcher.unwatch();
				}
				var dpi:DistributionInfo = (entryDetailsModel.getDataPack(DistributionDataPack) as DistributionDataPack).distributionInfo;
				_disProfWatcher = BindingUtils.bindProperty(this, "distributionProfilesArray", dpi, "distributionProfiles");
			}


			public function get entryDetailsModel():VMvCModel {
				return _entryDetailsModel;
			}

			/**
			 * saves the loaded VDP across window opening
			 * and closing to improve performance
			 * */
			private static var _vdp3SwfLoader:SWFLoader;


			[Bindable]
			/**
			 * last selected entry
			 * */
			private var _selectedEntry:VidiunBaseEntry;

			[Bindable]
			/**
			 * filtering parameters
			 * */
			public var filterModel:FilterModel;

			/**
			 * application context
			 * */
			public var context:ContextDataPack;


			[Bindable]
			private var _listableVo:ListableVo;


			/**
			 * moderation tab data
			 * */
			private var _moderationModel:ModerationModel;

			/**
			 * the field on which to order results
			 * */
			private var _orderBy:String = VidiunMediaEntryOrderBy.CREATED_AT_ASC;

			/**
			 * used to initialize after both external data is ready and creationComplete
			 * */
			private var _ready:Boolean = false;


			private var _disProfWatcher:ChangeWatcher;

			[Bindable]
			/**
			 * Distribution profiles
			 * */
			public var distributionProfilesArray:Array;

			private var _initialFilter:VidiunMediaEntryFilter;


			/**
			 * list of entries that are being approved / rejected
			 * */
			private var _affectedEntries:Array;

			/**
			 * a flag indicating the tab was intialised
			 * */
			private var _initOnce:Boolean;
			
			/**
			 * RnP (feature): disable alerts in VDP
			 * */
			public var disableVDPAlerts:Boolean = true;


			// ===============================================
			// methods
			// ===============================================

			public function onRequestedDataLoaded():void {
				if (_ready) {
					paging.selectedPage = 1;
					paging.vidiunFilterPager.pageSize = paging.rowInPageCb.value as int;

					if (_initOnce) {
						loadEntries();
					}
					else {
						initOnce();
					}
				}
				else {
					_ready = true;
				}
			}


			/**
			 * this is the old creationComplete handler, it needs to be triggered
			 * only after all data is present, and also after creationComplete,
			 * so we trigger it manualy (through init())
			 * */
			public function init(entryFilter:VidiunBaseEntryFilter = null):void {
				if (entryFilter && entryFilter is VidiunMediaEntryFilter) {
					_initialFilter = entryFilter as VidiunMediaEntryFilter;
				}
				
				if (filterModel.loadingRequired) {
					// load all the data the filter needs
					var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this, filterModel);
					VedController.getInstance().dispatch(fe);
				}
				else {
					onRequestedDataLoaded();
				}
			}


			/**
			 * load all the data the filter needs
			 * */
			private function initOnce():void {
				var vFilter:VidiunMediaEntryFilter;
				if (_initialFilter) {
					vFilter = _initialFilter
				}
				else {
					vFilter = EntriesFilter.generateBaseFilter();
					// setting defaults to view only pending and flagged.
					vFilter.moderationStatusIn = VidiunEntryModerationStatus.PENDING_MODERATION + "," + VidiunEntryModerationStatus.FLAGGED_FOR_REVIEW;
				}
				filter.vidiunFilter = vFilter;

				loadVDP();

				PermissionManager.getInstance().applyAllAttributes(this, this.id);

				_initOnce = true;
				loadEntries();
			}


			/**
			 * When the moderation is hidden by moving to another tab, stop the player from playin
			 * if it is playing
			 */
			private function hideHandler():void {
				if (_vdp3SwfLoader && _vdp3SwfLoader.content && _vdp3SwfLoader.content.hasOwnProperty("sendNotification")) {
					_vdp3SwfLoader.content["sendNotification"](VdpEventTypes.DO_PAUSE);
					_vdp3SwfLoader.content["sendNotification"](VdpEventTypes.DO_SEEK, "0");
				}
				
				//When one click on switch tab and get back if the accordion filter is not the first child 
				//everything looked curapted. This will resolve the issue when one swith tabs
				/////////////////////////////////////////////////////////////////////////////////
				if(filter && filter.accordion)
					filter.accordion.selectedIndex = 0;
			}


			/**
			 * get list of entries from the server
			 * */
			public function loadEntries():void {
				clearData();
				_listableVo = new ListableVo(filter.vidiunFilter, paging, null);
				// set the order-by to the filter
				if (_orderBy) {
					_listableVo.filterVo.orderBy = _orderBy;
				}

				var cgEvent:CairngormEvent = new SetListableEvent(SetListableEvent.SET_NEW_LIST_TO_MODEL, _listableVo);
				cgEvent.dispatch();
				cgEvent = new VMCSearchEvent(VMCSearchEvent.DO_SEARCH_ENTRIES, _listableVo);
				cgEvent.dispatch();
			}


			private function clearData(clearOnly:Boolean = false):void {
				if (!clearOnly) {
					entryTable.selectedIndex = -1;
				}
				if (_vdp3SwfLoader && _vdp3SwfLoader.content) {
					_vdp3SwfLoader.content["sendNotification"](VdpEventTypes.CLEAN_MEDIA);
					moderationModel.moderationsArray.source = [];
				}
			}



			private function removeColumns(event:Event, showActions:Boolean = true):void {
				var ar:Array = [EntryTableColumns.THUMBNAIL, EntryTableColumns.ID, EntryTableColumns.NAME, EntryTableColumns.MEDIA_TYPE,
					EntryTableColumns.PLAYS, EntryTableColumns.CREATE_AT, EntryTableColumns.FLAGS, EntryTableColumns.MOD_STATUS];
				
				if (showActions) {
					ar.push(EntryTableColumns.ACTIONS);
				}
				
				entryTable.showColumns(ar);

				for each (var col:DataGridColumn in entryTable.columns) {
					col.minWidth = 45;
				}

				entryTable.updateDefaultSortColumn();
			}


			//paging
			private function gotoPage():void {
				loadEntries();
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE, GoogleAnalyticsConsts.CONTENT);
				VAnalyticsTracker.getInstance().sendEvent(VAnalyticsTrackerConsts.CONTENT, VidiunStatsVmcEventType.CONTENT_CONTENT_GO_TO_PAGE, "content>Show Rows");
			}


			private function getModeration():void {
				var entry:VidiunBaseEntry = entryTable.selectedItem as VidiunBaseEntry;

				if (_selectedEntry != entry) {
					_selectedEntry = entry; // remember 

					if (entry && entry.moderationCount > 0) {
						entry.moderations = new ArrayCollection();
						var cgEvent:VMCEntryEvent = new VMCEntryEvent(VMCEntryEvent.LIST_ENTRY_MODERATION, entry);
						cgEvent.dispatch();
					}
					if (vdp3Loader && _vdp3SwfLoader.content) {
						vdp3Loader.content["sendNotification"](VdpEventTypes.DO_PAUSE);
						if (entry && entry.status == VidiunEntryStatus.READY) {
							// only changeMedia to ready entries
							_vdp3SwfLoader.content["sendNotification"](VdpEventTypes.CHANGE_MEDIA, {entryId: entry.id});
						}
						else {
							clearData(true);
						}
					}
				}
			}



			private function banUser():void {
				if (entryTable.selectedItem) {
					var user:UserVO = new UserVO();
					user.puserId = (entryTable.selectedItem as VidiunBaseEntry).userId;
					var userEvent:UserEvent = new UserEvent(UserEvent.BAN_USER, user);
					userEvent.dispatch();
				}
				else
					Alert.show(resourceManager.getString('cms', 'selectUsersEntryFirst'));
			}



			/**
			 * controller has selected all entries
			 */
			private function onSelectAllEntries(evt:Event):void {
				entryTable.selectAll();
			}


			private function onDeselectAllEntries(evt:Event):void {
				entryTable.deselectAll();
			}

			private function entryTable_approveRejectHandler(event:EntryTableEvent):void {
				var entry:VidiunBaseEntry = event.data as VidiunBaseEntry;
				if (event.type == EntryTableEvent.APPROVE_ENTRY) {
					onApprove([entry]);
				} else if (event.type == EntryTableEvent.REJECT_ENTRY) {
					onReject([entry]);
				}
			}

			/**
			 * approve button was clicked
			 */
			private function onApprove(entries:Array = null):void {
				if (entries) {
					_affectedEntries = entries;
				}
				else {
					_affectedEntries = entryTable.selectedItems.concat();
				}
				if (_affectedEntries.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'),
						resourceManager.getString('cms', 'pleaseSelectEntriesFirstTitle'));
					return;
				}
				if (_moderationModel.confirmModeration) {

					var confirmString:String = resourceManager.getString('cms', 'confirmApprove');
					for (var i:int = 0; i < _affectedEntries.length; i++) {
						confirmString += (i + 1) + '. ' + (_affectedEntries[i] as VidiunBaseEntry).name + '\n';
					}
					Alert.show(confirmString, resourceManager.getString('cms', 'confirmApproveTitle'), Alert.YES | Alert.NO, this, approveEntries);
				}
				else {
					approveEntries();
				}
			}


			private function approveEntries(e:CloseEvent = null):void {
				if (!e || (e && e.detail == Alert.YES)) {
					clearData();
					var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.APPROVE, _affectedEntries)
					cgEvent.dispatch();
				}
				_affectedEntries = null;
			}


			/**
			 * reject button was clicked
			 */
			private function onReject(entries:Array = null):void {
				if (entries) {
					_affectedEntries = entries;
				}
				else {
					_affectedEntries = entryTable.selectedItems.concat();
				}
				if (_affectedEntries.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'),
						resourceManager.getString('cms', 'pleaseSelectEntriesFirstTitle'));
					return;
				}
				if (_moderationModel.confirmModeration) {
					var confirmString:String = resourceManager.getString('cms', 'confirmReject');
					for (var i:int = 0; i < _affectedEntries.length; i++) {
						confirmString += (i + 1) + '. ' + (_affectedEntries[i] as VidiunBaseEntry).name + '\n';
					}
					Alert.show(confirmString, resourceManager.getString('cms', 'confirmRejectTitle'), Alert.YES | Alert.NO, this, rejectEntries);
				}
				else {
					rejectEntries();
				}
			}


			private function rejectEntries(e:CloseEvent = null):void {
				if (!e || (e && e.detail == Alert.YES)) {
					clearData();
					var cgEvent:ModerationsEvent = new ModerationsEvent(ModerationsEvent.UPDATE_ENTRY_MODERATION, ModerationsEvent.REJECT, _affectedEntries)
					cgEvent.dispatch();
				}
				_affectedEntries = null;
			}


			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}


			/**
			 * Vdp loaded
			 */
			private function onVDP3Loaded(event:Event):void {
				//set it to later be used as static
				_vdp3SwfLoader = vdp3Loader;

				var params:Object = new Object();
				params.host = context.rootUrl;
//				params.widgetId = "_" + context.vc.partnerId;
				params.entryId = "-1";
				params.vs = context.vc.vs;
				params.partnerId = context.vc.partnerId;
				params.subpId = context.vc.partnerId + "00";
				params.cdnHost = context.cdnHost;
				params.disableAlerts = disableVDPAlerts;
				params.debugMode = context.debugMode;
				params.allowCookies = true;
				
				params = VPlayerUtil.overrideStrings(params);
				params = VPlayerUtil.overrideElementStrings(params);

				_vdp3SwfLoader.content["flashvars"] = params; //set flashvars
				_vdp3SwfLoader.content["init"](); //start the loading sqeunce of the vdp
			}


			/**
			 * Load VDP function
			 *
			 */
			private function loadVDP():void {
				var moderationUiconf:String = "48503";	// fallback to the ice age
				if (context.moderationUiconf)
					moderationUiconf = context.drilldownUiconf;

				var newUrl:String = context.protocol + context.cdnHost + "/vwidget/wid/_" + context.vc.partnerId + "/ui_conf_id/" + moderationUiconf + "/nowrapper/1";
				vdp3Loader.scaleContent = false;
				vdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain(), SecurityDomain.currentDomain);
				vdp3Loader.load(newUrl);
			}


			/**
			 * In case a user clicked on a drill down, pause the current playing video
			 */
			private function onDrillDown():void {
				if (_vdp3SwfLoader)
					_vdp3SwfLoader.content["sendNotification"](VdpEventTypes.DO_PAUSE);
			}


			private function filter_filterChangedHandler(event:Event):void {
				paging.selectedPage = 1;
				loadEntries();
			}


			// ===============================================
			// getters / setters
			// ===============================================

			[Bindable]
			public function get moderationModel():ModerationModel {
				return _moderationModel;
			}


			public function set moderationModel(value:ModerationModel):void {
				_moderationModel = value;
			}
			

			public function get showActions():Boolean
			{
				return true;
			}

			public function set showActions(value:Boolean):void
			{
				removeColumns(null, false);
			}


		]]>
	</mx:Script>
	<business:EntryTableActionsManager id="actionsManager"/>

	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Label id="pageLabel" text="{resourceManager.getString('cms', 'moderation')}" styleName="filterTitleHeader"
				  width="{filter.width}"/>
		<fltr:FreeTextSearch id="searchBox" styleName="searchHBox" width="{245}" height="{pageLabel.height}"
							 attribute="freeText" defaultText="{resourceManager.getString('filter', 'searchEntries')}"
							 helpAnchore="freetext_entries"/>
		<indicators:Indicators id="indicators" width="100%" height="60" dataProvider="{filter.indicators}"
							   boxClicked="filter.removeFilter(event.data)"/>
		<mx:VBox styleName="noPadding">
			<mx:LinkButton click="loadEntries()" label="{resourceManager.getString('cms','refresh')}"
						   styleName="recycleIcon"/>
			<mx:Label text="{resourceManager.getString('filter', 'indicatorsLabel', [indicators.numExceeded])}"
					  visible="{indicators.numExceeded > 0}" styleName="indicatorsLabel"/>
		</mx:VBox>
	</mx:HBox>

	<mx:HDividedBox id="topContainer" width="100%" height="100%">
		<fltr:EntriesFilter id="filter" height="100%" width="245" freeTextSearch="{searchBox}"
							metadataProfiles="{filterModel.metadataProfiles}"
							context="{entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack}"
							distributionProfiles="{entryDetailsModel.getDataPack(DistributionDataPack)['distributionInfo'].distributionProfiles}"
							filterModel="{filterModel}" categoriesTreeSelectionAttribute="selectedModScreen"
							categoriesRoot="{filterModel.categoriesForMod}"
							allCategories="{filterModel.categoriesMapForMod}"
							filterChanged="filter_filterChangedHandler(event)"/>
		<mx:VBox id="entryTableContainer" styleName="entriesTablePagerAndButtonsVbox" width="100%" height="100%">
			<mx:HBox id="mainCont" height="100%" width="100%" styleName="moderationHBox" paddingTop="0">
				<et1:EntryTable id="entryTable" width="100%" openEntry="{onDrillDown()}"
								selectionChanged="actionsManager.itemClickHandler(event); getModeration();"
								showDetails="actionsManager.showEntryDetailsHandler(event)"
								openPreview="actionsManager.preview(event)" sortDirection="{EntryTable.ASCENDING}"
								dataProvider="{_listableVo.arrayCollection}" orderByChanged="{onOrderByChanged()}"
								creationComplete="removeColumns(event)" showModerationActions="true"
								approveEntry="entryTable_approveRejectHandler(event)" rejectEntry="entryTable_approveRejectHandler(event)"/>
				<mx:Panel id="vdpContainer" height="100%" minWidth="290" styleName="modPrev"
						  toolTip="{entryTable.selectedItem.name}" layout="vertical"
						  title="{resourceManager.getString('cms', 'preview')} - {entryTable.selectedItem.name}">
					<mx:SWFLoader id="vdp3Loader" width="280" height="255" init="{onVDP3Loaded(event)}"
								  includeInLayout="{_selectedEntry == null || _selectedEntry.status != VidiunEntryStatus.NO_CONTENT}"
								  visible="{_selectedEntry == null || _selectedEntry.status != VidiunEntryStatus.NO_CONTENT}"/>
					<mx:Image width="280" height="255" source="{StyleManager.getStyleDeclaration('.imageBank').getStyle('noContentImgL')}" 
							  includeInLayout="{_selectedEntry != null &amp;&amp; _selectedEntry.status == VidiunEntryStatus.NO_CONTENT}"
							  visible="{_selectedEntry != null &amp;&amp; _selectedEntry.status == VidiunEntryStatus.NO_CONTENT}"/>
					<mx:VBox width="280" height="100%">
						<mx:HBox width="100%" styleName="modPrevToolBar">
							<mx:Label text="{entryTable.selectedItem.moderationCount} {resourceManager.getString('cms', 'flag')}"/>
							<mx:Spacer width="100%"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'viewFullDetails')}"
										   click="{entryTable.openEditEntry(entryTable.selectedItem)}"/>
							<mx:LinkButton label="{resourceManager.getString('cms', 'banUser')}" click="banUser()"
										   labelPlacement="left" styleName="banUser"/>
						</mx:HBox>
						<mx:List id="modList" width="100%" height="100%" minHeight="80" rowHeight="80" 
								 styleName="flagList" selectable="false" dataProvider="{moderationModel.moderationsArray}"
								 itemRenderer="com.vidiun.vmc.modules.content.view.itemrenderers.ModerationItemRenderer"/>

					</mx:VBox>
				</mx:Panel>
			</mx:HBox>
			<mx:HBox width="100%" styleName="noPadding" horizontalGap="0">
				<bulkactions:BulkModerationActionsMenu id="bulkActions" height="{paging.height}"
													   approveEntries="onApprove()" rejectEntries="onReject()"/>
				<controls:Paging id="paging" styleName="paging" rowsInPageChange="gotoPage()" width="100%"
								 nextPage="gotoPage()" prvPage="gotoPage()" getPageNum="gotoPage()" />
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>
