<?xml version="1.0" encoding="utf-8"?>
<modules:VmcModule xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:modules="com.vidiun.vmc.modules.*"
				   xmlns:core="com.vidiun.core.*" xmlns:view="com.vidiun.vmc.modules.studio.view.*"
				   xmlns:business="com.vidiun.vmc.modules.studio.business.*" xmlns:controls="com.vidiun.controls.*"
				   layout="vertical" minHeight="510" minWidth="1000" styleName="adminModuleMain"
				   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				   addedToStage="initTracker(event);">
	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.commands.uiConf.UiConfGet;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.vo.LocalizedVo;
			import com.vidiun.events.VidiunEvent;
			import com.vidiun.vmc.business.JSGate;
			import com.vidiun.vmc.events.VmcHelpEvent;
			import com.vidiun.vmc.events.VmcNavigationEvent;
			import com.vidiun.vmc.modules.studio.events.ApsNavigationEvent;
			import com.vidiun.vmc.modules.studio.events.ApsUiConfEvent;
			import com.vidiun.vmc.modules.studio.view.ApsWizard;
			import com.vidiun.vmc.modules.studio.vo.PlayerContentVo;
			import com.vidiun.vmc.modules.studio.vo.PlayerUiConfVo;
			import com.vidiun.vmc.vo.Context;
			import com.vidiun.vo.VidiunUiConf;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			/**
			 * VMC is responsible to use the value of
			 * this const as the id of this module.
			 * */
			public static const NAME:String = "studio";
			
			

			override public function getModuleName():String {
				return NAME;
			}
			
			private var _initTab:String;
			
			
			
			override public function showSubtab(subtab:String, data:Object = null):void {
				if (isModuleReady) {
					if (subtab == 'playersList') subtab = 'flash_studio';
					
					if (subtab == 'flash_studio' && showFlashStudio) {
						// only need to mark tln, the rest is already on screen and init'ed
						if (_subtabs.getItemAt(0).value == 'flash_studio') {
							secTln.selectedIndex = 0;
						}
						else if (_subtabs.getItemAt(1).value == 'flash_studio') {
							secTln.selectedIndex = 1;
						}
					}
					else if (subtab == 'universal_studio'){
						// verify we have uni studio
						if (showUniversalStudio)
							JSGate.triggerJS('vmc.functions.openStudio');
						else {
							// we only have flash studio, it's in the 0th index
							secTln.selectedIndex = 0;
						}
					}
					else if (subtab == 'studio_v3') {
						// verify we have uni studio
						if (showStudioV3)
							JSGate.triggerJS('vmc.functions.openStudioV3');
						else {
							// we only have flash studio, it's in the 0th index
							secTln.selectedIndex = 0;
						}
					}
					if (!mainView.visible) mainView.visible = true;
				}
				else {
					_initTab = subtab;
				}
			}
			
			[Bindable]
			private var _subtabs:ArrayCollection;
			
			/**
			 * RnP - show flash studio
			 * */
			public var showFlashStudio:Boolean = true;
			
			/**
			 * RnP - show HTML studio
			 * */
			public var showUniversalStudio:Boolean = true;
			
			/**
			 * RnP - show studio v3
			 * */
			public var showStudioV3:Boolean = true;
			

			/**
			 * player edit/creation window
			 * */
			private var _wizard:ApsWizard;

			/**
			 * swfurl assigned to new / edited players
			 * */
			private var _swfUrl:String;
			
			/**
			 * html5url assigned to new / edited players
			 * */
			private var _html5Url:String;
			
			private var _media:PlayerContentVo;


			[Bindable]
			/**
			 * a list of optional player templates
			 * */
			private var _appStudioTemplates:XML;

			public static var vc:VidiunClient;
			
			
		
			/**
			 * flag indicating whether a user can preview&embed multi-playlist players.
			 * */
			protected var _canPreviewAndEmbed : Boolean = true;
			/**
			 * static access to application flashvars.
			 * all keys are lowercase with no underscores.
			 * */
			public static var flashvars:Object;


			override protected function start():void {
				Security.allowDomain('*');
				
				// make flashvars accessible for all module
				Studio.flashvars = _flashvars;
				
				// make client accessible for all module
				vc = _vc;
				
				// create application context
				_context = new Context(_vc.vs, _flashvars.partnerid, _flashvars.uid, _flashvars.subpid);

				// loaded data
				var conf:XML = new XML(_uiconf.confFile);
				
				// save media info
				_media = new PlayerContentVo();
				_media.entryId = conf.content.entryId.text().toString();
				
				// playlists list
				var plsts:XMLList = conf.content.playlists.playlist;
				
				// number of playlists
				var pls:int = plsts.length();
				// save playlists info
				for (var i:int = 0; i<pls; i++) {
					_media["vpl" + i + "Name"] = plsts[i].name[0].text().toString();
					// replace pid & subpid
					var s:String = _vc.protocol + _flashvars.host + plsts[i].url[0].text().toString();
					s = s.replace("{pid}", _flashvars.partnerid);
					s = s.replace("{spid}", _flashvars.subpid);
					_media["vpl" + i + "Url"] = s;
					
				}
				//TODO only if flash studio is on
				// get templates info:
				var uiconf:UiConfGet = new UiConfGet(conf.uiconf.text().toString());
				uiconf.addEventListener(VidiunEvent.COMPLETE, loadedAppstudioUiconf);
				uiconf.addEventListener(VidiunEvent.FAILED, failed);
				vc.post(uiconf);
				
				PermissionManager.getInstance().applyAllAttributes(this,id);
				
				// create navigation DP
				_subtabs = new ArrayCollection();
				if (showUniversalStudio) {
					_subtabs.addItem(new LocalizedVo('uni_studio', 'uni_studio', 'aps'));
				}
				if (showFlashStudio) {
					_subtabs.addItem(new LocalizedVo('flash_studio', 'flash_studio', 'aps'));
				}
				if (showStudioV3) {
					_subtabs.addItem(new LocalizedVo('studio_v3', 'studio_v3', 'aps'));
				}
				if (_subtabs.length > 0) {
					secTln.selectedIndex = 0;
				}
				
				secTln.visible = true;
				setModuleReady();
				if (_initTab) {
					showSubtab(_initTab);
					_initTab = null;
				}
				else {
					if (_subtabs.getItemAt(0).value == 'uni_studio') {
						JSGate.triggerJS('vmc.functions.openStudio');
					}
					else if (_subtabs.getItemAt(0).value == 'studio_v3') {
						JSGate.triggerJS('vmc.functions.openStudioV3');
					}
				}
			}
			
			protected function initTracker(event:Event):void {
				GoogleAnalyticsTracker.getInstance().setBasePath("VMC/Studio");
			}



			/**
			 * loaded the uiconf that holds the vdp flash version
			 * and templates data
			 * */
			private function loadedAppstudioUiconf(evt:VidiunEvent):void {
				ExternalInterface.addCallback('refreshPlayersList', playerList.refresh);
				playerList.refresh();
				_swfUrl = (evt.data as VidiunUiConf).swfUrl;
				_html5Url = (evt.data as VidiunUiConf).html5Url;

				// if need to load local templates file 
				if (_flashvars.templatesxmlurl) {
					getAllTemplates.url = _flashvars.templatesxmlurl;
					getAllTemplates.send();
				}
				else {
					// use the data received from uiconf
					_appStudioTemplates = new XML((evt.data as VidiunUiConf).confFile);
					this.enabled = true;
				}
			}


			/**
			 * could not get the uiConf that holds the vdp version
			 * */
			private function failed(evt:VidiunEvent):void {
				Alert.show(evt.error.errorMsg);
			}


			/**
			 * create a wizard for editing requested player
			 * */
			private function onEditPlayer(evt:ApsNavigationEvent):void {
				var playerUiConfVo:PlayerUiConfVo = evt.data as PlayerUiConfVo;
				newWizard(playerUiConfVo, false);
			}


			private function closeWizard(evt:ApsNavigationEvent):void {
				this.enabled = true;
				// close wizard window
				PopUpManager.removePopUp(_wizard);
				enableHtmlTabs(true);
				_wizard = null;
				// refresh players list
				playerList.refresh();
			}


			/**
			 * show create/edit player wizard
			 * */
			private function newWizard(playerUiConfVo:PlayerUiConfVo, isNew:Boolean = false):void {
				_wizard = new ApsWizard();
				_wizard.swfUrl = _swfUrl;
				_wizard.html5Url = _html5Url;
				_wizard.isNewPlayer = isNew;
				_wizard.id = "wizard";
				_wizard.styleName = "WinTitleStyle";
				_wizard.context = _context;
				_wizard.media = _media;
				_wizard.playerUiConfVO = playerUiConfVo;
				_wizard.appStudioTemplates = _appStudioTemplates;

				if (isNew)
					_wizard.title = resourceManager.getString('aps', 'createPlayerTitle');
				else
					_wizard.title = resourceManager.getString('aps', 'editPlayerTitle', [playerUiConfVo.name]);

				_wizard.addEventListener(ApsNavigationEvent.CLOSE_WIZARD, closeWizard);
//				_wizard.addEventListener(VmcHelpEvent.HELP, dispatchHelp);
				enableHtmlTabs(false);
				PopUpManager.addPopUp(_wizard, Application.application as DisplayObject);
				PopUpManager.centerPopUp(_wizard);
				this.enabled = false;
			}
			
			
//			/**
//			 * dispatch relevant help event
//			 * */
//			private function dispatchHelp(e:VmcHelpEvent):void {
//				dispatchEvent(e.clone());
//			}


			/**
			 * shows the window for creating a new player
			 * */
			private function createNewPlayer(event:ApsUiConfEvent):void {
				var playerUiConfVo:PlayerUiConfVo = event.data as PlayerUiConfVo;
				newWizard(playerUiConfVo, true);
			}


			/**
			 * This function is triggered when a local templates file is loaded
			 * */
			private function onTemplateXmlLoaded(event:ResultEvent):void {
				_appStudioTemplates = XML(event.result);
				this.enabled = true;
			}


			/**
			 * This function is triggered when a local templates file failed to load.
			 * */
			private function onTemplateXmlFault(event:FaultEvent):void {
				this.enabled = true;
				Alert.show(event.fault.message);
			}
			[Bindable]
			public function set canPreviewAndEmbed (value : Boolean) : void {
				_canPreviewAndEmbed = value;
			}
			
			public function get canPreviewAndEmbed () : Boolean {
				return _canPreviewAndEmbed;
			}
			
			
			
			
			/**
			 * dispatch help event with relevant data
			 * */
			private function help():void {
				dispatchEvent(new VmcHelpEvent(VmcHelpEvent.HELP, 'section_studio_player_list'));
			}
			
			
			
			private function secTln_itemClickHandler(event:ItemClickEvent):void {
				switch (event.item.value) {
					case 'uni_studio':
						// go through navigation, so url will be updated
						dispatchEvent(new VmcNavigationEvent(VmcNavigationEvent.NAVIGATE, "studio", "uni_studio"));
						break;
					case 'studio_v3':
						// go through navigation, so url will be updated
						dispatchEvent(new VmcNavigationEvent(VmcNavigationEvent.NAVIGATE, "studio", "studio_v3"));
						break;
					case 'flash_studio':
						// do nothing;
						break;
				}
				secTln.selectedIndex = 0;
			}
			
		]]>
	</mx:Script>

	<mx:Metadata>
		[ResourceBundle("advertising")]
		[ResourceBundle("aps")]
	</mx:Metadata>

	<!--- player templates loader -->
	<mx:HTTPService id="getAllTemplates" method="GET" resultFormat="xml" showBusyCursor="true"
					result="onTemplateXmlLoaded( event )" fault="onTemplateXmlFault( event )"/>
	
	
	<mx:VBox id="mainView" width="100%" height="100%" visible="false">
		<mx:HBox width="100%" styleName="tabsContainer">
			<mx:TabBar id="secTln" styleName="tln" buttonMode="true" dataProvider="{_subtabs}" visible="false" 
					   itemClick="secTln_itemClickHandler(event)">
			</mx:TabBar>
			<mx:Spacer width="100%"/>
			<mx:Button styleName="help" buttonMode="true" click="help()"/>
		</mx:HBox>

		<view:ApsPlayersList id="playerList" width="100%" height="100%"
							 label="{resourceManager.getString('aps','playersList')}" context="{_context}"
							 editPlayer="onEditPlayer(event)" canPreviewAndEmbed="{canPreviewAndEmbed}"
							 newPlayerChosen="{createNewPlayer(event)}" appStudioTemplates="{_appStudioTemplates}"/>

	</mx:VBox>
</modules:VmcModule>
