<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" minWidth="930" minHeight="595"
				implements="com.vidiun.edw.business.IDataOwner"
				creationComplete="creationCompleteHandler(event)"
				addedToStage="initTracker(event)">
	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.commands.uiConf.UiConfGet;
			import com.vidiun.config.VidiunConfig;
			import com.vidiun.edw.business.IDataOwner;
			import com.vidiun.edw.control.DataTabController;
			import com.vidiun.edw.control.VedController;
			import com.vidiun.edw.control.events.VedEntryEvent;
			import com.vidiun.edw.control.events.LoadEvent;
			import com.vidiun.edw.control.events.MetadataProfileEvent;
			import com.vidiun.edw.events.VedDataEvent;
			import com.vidiun.edw.model.FilterModel;
			import com.vidiun.edw.model.datapacks.ContextDataPack;
			import com.vidiun.edw.model.datapacks.CuePointsDataPack;
			import com.vidiun.edw.model.datapacks.CustomDataDataPack;
			import com.vidiun.edw.model.datapacks.FilterDataPack;
			import com.vidiun.edw.view.EntryDetailsWin;
			import com.vidiun.events.VidiunEvent;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.utils.ObjectHelpers;
			import com.vidiun.vo.VidiunBaseEntry;
			import com.vidiun.vo.VidiunUiConf;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResourceEvent;
			import mx.events.StyleEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			private const FALLBACK_LOCALE:String = "en_US";
			
			public static const VERSION:String = "0.1";
			
			/**
			 * application parameters
			 * */
			private var _flashvars:Object;
			
			/**
			 * timer to flush VidiunCalls queue
			 * */
			private var _vcTimer:Timer;
			
			/**
			 * Vidiun Client for making API calls
			 * */
			private var _client:VidiunClient;
			
			/**
			 * list of EDWs opened by this app (to allow replacement, parent, etc)
			 * */
			private var _popups:Vector.<EntryDetailsWin>;
			
			/**
			 * configuration object
			 * */
			protected var _uiconf:VidiunUiConf;
			
			/**
			 * currently showing locale code
			 * */
			protected var _localeCode:String;
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				Security.allowDomain("*");
				
				_flashvars = fixFlashvars();
				_client = createClient(_flashvars);
				
				// load resources
				loadSkin("assets/vmc_skin.swf");
				loadUiconf(_flashvars.uiconf_id);
			}
			
			
			/**
			 * Load locale data.
			 * @param localePath	path to the locale (.swf) file
			 * @param language		locale code (i.e. en_US)
			 * */
			protected function loadLocale(localePath:String, language:String):void {
				_localeCode = language;
				localePath = localePath.replace(/{locale}/g, language);
				var eventDispatcher:IEventDispatcher = ResourceManager.getInstance().loadResourceModule(localePath);
				eventDispatcher.addEventListener(ResourceEvent.ERROR, localeLoadCompleteHandler);
				eventDispatcher.addEventListener(ResourceEvent.COMPLETE, localeLoadCompleteHandler);
			}
			
			
			/**
			 * Set use of loaded locale.
			 * This is also the place to update any values which are not
			 * bound to resource manager values and have to be set manualy.
			 * */
			protected function localeLoadCompleteHandler(event:ResourceEvent):void {
				event.target.removeEventListener(ResourceEvent.COMPLETE, localeLoadCompleteHandler);
				event.target.removeEventListener(ResourceEvent.ERROR, localeLoadCompleteHandler);
				if (event.type == ResourceEvent.ERROR) {
					Alert.show(event.errorText, "Locale Error", Alert.OK);
				}
				var chain:Array;
				if (_localeCode == FALLBACK_LOCALE) {
					chain = [_localeCode];
				}
				else {
					chain = [_localeCode, FALLBACK_LOCALE];
				}
				ResourceManager.getInstance().localeChain = chain;
				start();
			}
			
			/**
			 * load skin dynamically
			 * @param path	path to skin .swf file
			 * */
			protected function loadSkin(path:String = ""):void {
				var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(path);
				eventDispatcher.addEventListener(StyleEvent.COMPLETE, onSkinLoaded, false, 0, true);
				eventDispatcher.addEventListener(StyleEvent.ERROR, onSkinLoaded, false, 0, true);
			}
			
			
			/**
			 * Skin loaded or load error. </br>
			 * We go on anyway, alerting the user if skin load failed.
			 * */
			protected function onSkinLoaded(event:StyleEvent):void {
				if (event.type == StyleEvent.ERROR) {
					Alert.show(event.errorText, ResourceManager.getInstance().getString('vmc', 'skin_load_error_title'));
				}
			}
			
			
			public function onRequestedDataLoaded():void {
				// after filter data is loaded, open the drilldown
				var edw:EntryDetailsWin = openEntryDetails();
				PopUpManager.addPopUp(edw, this);
				_popups.push(edw);
				
				var vEvent:VedEntryEvent = new VedEntryEvent(VedEntryEvent.GET_ENTRY_AND_DRILLDOWN, null, _flashvars.entryid);
				VedController.getInstance().dispatch(vEvent);
			}
			
			/**
			 * opens a popup window with entry details
			 * */
			private function openEntryDetails():EntryDetailsWin {
				var edw:EntryDetailsWin = new EntryDetailsWin();
				edw.styleName = "WinTitleStyle";
				edw.addEventListener(VedDataEvent.ENTRY_RELOADED, handleVedEvents, false, 0, true);
				edw.addEventListener(VedDataEvent.CLOSE_WINDOW, handleVedEvents, false, 0, true);
				edw.addEventListener(VedDataEvent.ENTRY_UPDATED, handleVedEvents, false, 0, true);
				edw.addEventListener(VedDataEvent.OPEN_REPLACEMENT, handleVedEvents, false, 0, true);
				edw.addEventListener(VedDataEvent.OPEN_ENTRY, handleVedEvents, false, 0, true);
				edw.isNewEntry = false;//state == EntryDetailsWindowState.NEW_ENTRY;
				
				//get the selected entry from the server
//				if (state != EntryDetailsWindowState.NEW_ENTRY) {
//					var getSelectedEntry:VedEntryEvent = new VedEntryEvent(VedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null,
//						_entryData.selectedEntry.id);
//					VedController.getInstance().dispatch(getSelectedEntry);
//				}
//				if (state == EntryDetailsWindowState.REPLACEMENT_ENTRY) {
//					setReplacementDrilldown(edw);
//				}
				
				
				edw.entryDetailsModel = VMvCModel.getInstance();
//				if (state != EntryDetailsWindowState.NORMAL_ENTRY)
				edw.showNextPrevBtns = false;
//				else if (_model.listableVo)	// only for normal entries
//					edw.entriesAC = _model.listableVo.arrayCollection;
				return edw;
			}
			
				
				
			
			private function initModel():void {
				var uiconf:XML = new XML (_uiconf.confFile);
				var model:VMvCModel = VMvCModel.getInstance();
				
				// filter
				(model.getDataPack(FilterDataPack) as FilterDataPack).filterModel = new FilterModel();
				
				CustomDataDataPack.metadataDefaultUiconf = uiconf.uiconf.metadata.text().toString();
				
				(model.getDataPack(CuePointsDataPack)as CuePointsDataPack).cuepointsSamplesUrl = getFullUrl(uiconf.cuepoints.text().toString());
				
				// context
				var contextData:ContextDataPack = VMvCModel.getInstance().getDataPack(ContextDataPack) as ContextDataPack;
				contextData.showEmbedCode = true; //_model.showSingleEntryEmbedCode;
				contextData.landingPage = "testLandingPage.html?entryId={entryId}";//_model.extSynModel.partnerData.landingPage;
				contextData.openPlayerFunc = _flashvars.openPlayerFunc; 
				contextData.panelsConfig = uiconf.uiconf.entryDrilldown.panels[0];
				contextData.drilldownUiconf = uiconf.uiconf.vdp.drilldown.text().toString();
				contextData.vClipAdsUiconf = uiconf.uiconf.vclip.ads.text().toString();
				contextData.sourceUrl = systemManager.loaderInfo.url.substr(0, systemManager.loaderInfo.url.lastIndexOf("/"));
				contextData.debugMode = _flashvars.debugmode;
				contextData.userId = _flashvars.uid;
				contextData.subpId = _flashvars.subpid;
				contextData.rootUrl = _flashvars.host;
				contextData.cdnHost = _flashvars.cdnhost ? _flashvars.cdnhost : _flashvars.host;
				contextData.vc = _client;
			}
			
			
			protected function getFullUrl(url:String):String {
				if (url.indexOf('://') == -1) {
					// no protocol, concat from client
					url = _client.protocol + _client.domain + url; 
				}
				return url;
			}

			
			
			/**
			 * create VidiunClient using given parameters 
			 * @param params	application parameters
			 * */
			private function createClient(params:Object):VidiunClient {
				// 
				var configuration:VidiunConfig = new VidiunConfig();
				configuration.partnerId = params.partnerid;
				configuration.ignoreNull = 1;
				configuration.protocol = params.protocol ? params.protocol : "http://";
				configuration.domain = params.host;
				configuration.srvUrl = params.srvurl;
				configuration.clientTag = "ved:" + VERSION;
				configuration.vs = params.vs;
				
				var vidiunClient:VidiunClient = new VidiunClient(configuration);
				vidiunClient.queueing = true;
				vidiunClient.addEventListener(VidiunClient.CALL_QUEUED, setTimer);
				vidiunClient.addEventListener(VidiunClient.QUEUE_FLUSHED, setTimer);
				
				return vidiunClient;
			}
			
			
			/**
			 * handle events dispatched by the drilldown
			 * */
			private function handleVedEvents(e:VedDataEvent):void {
				switch (e.type) {
					case VedDataEvent.ENTRY_UPDATED:
						break; 

					case VedDataEvent.ENTRY_RELOADED:
						break;
					
					case VedDataEvent.CLOSE_WINDOW:
						// close the drilldown
						var edw:EntryDetailsWin = _popups.pop();
						PopUpManager.removePopUp(edw);
						break;
					
					case VedDataEvent.OPEN_REPLACEMENT:
						break;
					
					case VedDataEvent.OPEN_ENTRY:
						var vEvent:VMvCEvent = new VedEntryEvent(VedEntryEvent.SET_SELECTED_ENTRY, e.data as VidiunBaseEntry);
						VedController.getInstance().dispatch(vEvent);
						break;
				}
			}
			
			
			/**
			 * save flashvars (keep original keys as well as lowercased keys)
			 * */
			private function fixFlashvars():Object {
				var objParam:Object = Application.application.parameters;
				var oLowers:Object = ObjectHelpers.lowerNoUnderscore(objParam);
				for (var key:String in oLowers) {
					objParam[key] = oLowers[key];
				}
				return objParam;
			}

			
			/**
			 * load configuration info
			 * */
			protected function loadUiconf(uiconfId:String):void {
				var uiconf:UiConfGet = new UiConfGet(int(uiconfId));
				uiconf.addEventListener(VidiunEvent.COMPLETE, configurationLoadHandler);
				uiconf.addEventListener(VidiunEvent.FAILED, configurationLoadHandler);
				_client.post(uiconf);
			}
			
			
			/**
			 * use configuration info
			 * @param e		data from server
			 * */
			protected function configurationLoadHandler(e:VidiunEvent):void {
				if (e.type == VidiunEvent.COMPLETE) {
					_uiconf = e.data as VidiunUiConf;
					// update any values from flashvars
//					_uiconf.confFile = overrideDataByFlashvars(_uiconf.confFile, _flashvars);
					var confFile:XML = new XML(_uiconf.confFile);
					loadLocale(getLoadUrl(confFile.locale.path.toString()), confFile.locale.language.toString());
				}
				else {
					Alert.show(e.error.errorMsg, "Error");
				}
			}
			
			
			protected function start():void {
				_popups = new Vector.<EntryDetailsWin>();
				initModel();
				var filterData:FilterModel = (VMvCModel.getInstance().getDataPack(FilterDataPack) as FilterDataPack).filterModel;
				// get default metadata view
				if (filterData.enableCustomData) {
					//if we asked for metadata view, listen to propertyChangeEvent on the DP,
					// only when appropriate event received ask for drilldown. otherwise open drilldown
					var cddp:CustomDataDataPack = VMvCModel.getInstance().getDataPack(CustomDataDataPack) as CustomDataDataPack;
					if (!CustomDataDataPack.metadataDefaultUiconfXML) {
						cddp.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onMetadataViewUiconfLoaded);
						var getMetadataUiconf:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.GET_METADATA_UICONF);
						DataTabController.getInstance().dispatch(getMetadataUiconf);
					}
					else {
						loadFilterData();
					}
				}
			}
			
			
			protected function loadFilterData():void {
				var filterData:FilterModel = (VMvCModel.getInstance().getDataPack(FilterDataPack) as FilterDataPack).filterModel;
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this, filterData);
				VedController.getInstance().dispatch(fe);
				
			}
			
			
			protected function onMetadataViewUiconfLoaded(e:PropertyChangeEvent):void {
				if (e.property == "metadataDefaultUiconfXML" && e.newValue != null) {
					var cddp:CustomDataDataPack = VMvCModel.getInstance().getDataPack(CustomDataDataPack) as CustomDataDataPack;
					cddp.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onMetadataViewUiconfLoaded);
					
					loadFilterData();
				}
			}
			
			/**
			 * create the client flushing timer, activate or deactivate it as needed.
			 * */
			private function setTimer(e:Event):void {
				switch (e.type) {
					case VidiunClient.CALL_QUEUED:
						if (!_vcTimer) {
							_vcTimer = new Timer(250);
							_vcTimer.addEventListener(TimerEvent.TIMER, handleTimer, false, 0, true);
						}
						if (!_vcTimer.running) {
							_vcTimer.start();
						}
						break;
					case VidiunClient.QUEUE_FLUSHED:
						if (_vcTimer) {
							_vcTimer.stop();
						}
						break;
				}
			}
			
			
			/**
			 * flush client calls.
			 * */
			private function handleTimer(e:TimerEvent):void {
				_client.flush();
			}


			protected function initTracker(event:Event):void {
				// GAtracking
				var ga:GoogleAnalyticsTracker = GoogleAnalyticsTracker.getInstance();
				ga.init(_flashvars.partnerid, _flashvars.userid, this, "Ved SA/", _flashvars.urchinnumber, "AS3", _flashvars.gaDebug == "true" ? true : false);
			}
			
			/**
			 * decide if should use relative or absolute url.
			 * if the given path is ablsolute, return the same string.
			 * if the given path is relative, concatenate it to the swf url.
			 * @param	given path
			 * @return	path to use
			 * */
			protected function getLoadUrl(path:String):String {
				var url:String;
				if (path.indexOf("http") == 0) {
					url = path;
				}
				else {
					var li:String = Application.application.loaderInfo.url; 
					var base:String = li.substr(0, li.lastIndexOf("/"));  
					url = base + "/" + path;
				}
				return url;
			}


		]]>
	</mx:Script>
</mx:Application>
