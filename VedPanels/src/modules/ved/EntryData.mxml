<?xml version="1.0" encoding="utf-8"?>
<mx:Module layout="horizontal" xmlns:mx="http://www.adobe.com/2006/mxml" 
		   creationComplete="onCreationComplete()" implements="com.vidiun.edw.business.IDrilldownPanel"
		   label="{resourceManager.getString('drilldown', 'metadata')}" height="100%"
		   xmlns:components="com.hillelcoren.components.*" hide="pausePreview()">
	<mx:Metadata> 
		[Event(name="validationComplete", type="com.vidiun.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.vidiun.edw.events.InternalVedEvent")] 
	</mx:Metadata>


	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.autocomplete.controllers.VACCategoryController;
			import com.vidiun.autocomplete.controllers.VACTagsController;
			import com.vidiun.autocomplete.itemRenderers.selection.CategorySelectedItem;
			import com.vidiun.edw.business.EntryDataHelper;
			import com.vidiun.edw.business.EntryFormBuilder;
			import com.vidiun.edw.business.EntryUtil;
			import com.vidiun.edw.business.VedJSGate;
			import com.vidiun.edw.business.MetadataDataParser;
			import com.vidiun.edw.business.permissions.PermissionManager;
			import com.vidiun.edw.constants.PanelConsts;
			import com.vidiun.edw.control.DataTabController;
			import com.vidiun.edw.control.events.VedEntryEvent;
			import com.vidiun.edw.control.events.MetadataDataEvent;
			import com.vidiun.edw.control.events.MetadataProfileEvent;
			import com.vidiun.edw.control.events.ModelEvent;
			import com.vidiun.edw.events.InternalVedEvent;
			import com.vidiun.edw.events.ValidationResultEvent;
			import com.vidiun.edw.model.datapacks.ContextDataPack;
			import com.vidiun.edw.model.datapacks.CustomDataDataPack;
			import com.vidiun.edw.model.datapacks.DistributionDataPack;
			import com.vidiun.edw.model.datapacks.EntryDataPack;
			import com.vidiun.edw.model.datapacks.FilterDataPack;
			import com.vidiun.edw.model.datapacks.PermissionsDataPack;
			import com.vidiun.edw.view.customData.SingleCustomData;
			import com.vidiun.edw.view.window.CategoryBrowser;
			import com.vidiun.edw.vo.CustomMetadataDataVO;
			import com.vidiun.events.VdpEventTypes;
			import com.vidiun.vmvc.control.VMvCEvent;
			import com.vidiun.vmvc.model.IDataPackRepository;
			import com.vidiun.vmvc.model.VMvCModel;
			import com.vidiun.types.VidiunDVRStatus;
			import com.vidiun.types.VidiunEntryStatus;
			import com.vidiun.types.VidiunMediaType;
			import com.vidiun.types.VidiunNullableBoolean;
			import com.vidiun.types.VidiunRecordStatus;
			import com.vidiun.types.VidiunSourceType;
			import com.vidiun.types.VidiunTaggedObjectType;
			import com.vidiun.utils.VPlayerUtil;
			import com.vidiun.utils.VTimeUtil;
			import com.vidiun.vo.VMCMetadataProfileVO;
			import com.vidiun.vo.VidiunBaseEntry;
			import com.vidiun.vo.VidiunCategory;
			import com.vidiun.vo.VidiunLiveEntry;
			import com.vidiun.vo.VidiunLiveStreamEntry;
			import com.vidiun.vo.VidiunMediaEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;


			// =================================================================
			// Constants
			// =================================================================

			private static const customDataVerticalGap:int = 5;

			/**
			 * image to display when entry doesn't have content
			 * */
			private static const noMediaImage:* = StyleManager.getStyleDeclaration(".imageBank").getStyle("noContentImg");


			/**
			 * reference to vdp3Loader.
			 * due to performance issue that we fixed, this is static.
			 * */
			private static var vdp3StaticSwfLoader:SWFLoader;


			/**
			 * landing page replace string
			 * @internal
			 * the landing page is a page on the partner's website where they can view the entry directly.
			 * this is the token that tells VMC where the entry id should appear in the url.
			 * */
			private const ENTRY_PLACEHOLDER:String = '{entryId}';


			// ==============================
			// page layout: labels width
			// ==============================

			/**
			 * width of labels of editable fields
			 * */
			private const LABEL_WIDTH:Number = 90;

			/**
			 * width of components of editable fields
			 * */
			private const TEXT_WIDTH:Number = 264;


			/**
			 * width of label of noneditable fields on the left
			 * */
			private const RIGHT_LABEL_WIDTH:Number = 86;

			/**
			 * width of components of non editable fields on the left
			 * */
			private const RIGHT_TEXT_WIDTH:Number = 80;


			/**
			 * width of components of non editable fields on the left
			 * */
			private const RIGHT_TEXT_WIDTH2:Number = 62;

			// =================================================================
			// Other Stuff
			// =================================================================

			private var controller:DataTabController = DataTabController.getInstance();

			/**
			 * change watcher for categories list
			 * */
			private var _catWatcher:ChangeWatcher;

			/**
			 * change watcher for data load
			 * */
			private var _loadWatcher:ChangeWatcher;

			/**
			 * change watcher for custom data profiles, if not previously loaded via filter
			 * */
			private var _profsWatcher:ChangeWatcher;

			/**
			 * RnP: edit custom data
			 * */
			public var customDataEditable:Boolean = true;
			
			/**
			 * 
			 * */
			private var _enableCustomData:Boolean = true;

			/**
			 * RnP (feature): disable alerts in VDP
			 * */
			public var disableVDPAlerts:Boolean = true;
			
			[Bindable]
			/**
			 * RnP: should category selection controls be available
			 * */
			public var categoriesEditable:Boolean = true;


			// =================================================================
			// Data Model
			// =================================================================

			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:VidiunBaseEntry;


			[Bindable]
			/**
			 * the entry to which we apply changes
			 * */
			public function get selectedEntry():VidiunBaseEntry {
				return _selectedEntry;
			}


			public function set selectedEntry(value:VidiunBaseEntry):void {
				_recordedEntryId = null;
				if (value is VidiunLiveStreamEntry) {
					if ((value as VidiunLiveStreamEntry).sourceType == VidiunSourceType.LIVE_STREAM) {
						if ((value as VidiunLiveStreamEntry).recordedEntryId != null) {
							_recordedEntryId = (value as VidiunLiveStreamEntry).recordedEntryId;
						}
					}
				}

				if (value) {
					// clipping / trimming
					var val:Boolean = (value is VidiunMediaEntry); // media entry
					val &&= !(value is VidiunLiveEntry);	// not live entry
					val &&= (value as VidiunMediaEntry).mediaType != VidiunMediaType.IMAGE;	// not image
					val &&= value.status == VidiunEntryStatus.READY;	// status ready

					var pdp:PermissionsDataPack = _dpModel.getDataPack(PermissionsDataPack) as PermissionsDataPack;

					btnClipping.visible = btnClipping.includeInLayout = val && pdp.allowClipping;
					btnTrimming.visible = btnTrimming.includeInLayout = val && pdp.allowTrimming;
				}

				// set entry tags on screen
				if (value && value.tags) {
					var ac:ArrayCollection = new ArrayCollection(value.tags.split(", "));
					tagsComplete.selectedItems = ac;
				}
				else {
					tagsComplete.selectedItems = null;
				}

				// set selected entry
				_selectedEntry = value;
			}


			private var _dpModel:IDataPackRepository;


			public function get dataPackModel():IDataPackRepository {
				return _dpModel;
			}


			public function set dataPackModel(value:IDataPackRepository):void {
				_dpModel = value;
				_distributionData = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
				_entryData = _dpModel.getDataPack(EntryDataPack) as EntryDataPack;

				_loadWatcher = BindingUtils.bindProperty(this, "loadingFlag", _dpModel, "loadingFlag");
				_catWatcher = BindingUtils.bindSetter(setCategoriesOnScreen, _entryData, ["entryCategories"]);

				var context:ContextDataPack = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				showEmbed = context.showEmbedCode;
				
				var filterData:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
				_enableCustomData = filterData.filterModel.enableCustomData;
			}

			[Bindable]
			public var loadingFlag:Boolean;

			public function get helpAnchor():String {
				return "entry_metadata";
			}



			[Bindable]
			private var _distributionData:DistributionDataPack;

			[Bindable]
			private var _entryData:EntryDataPack;

			[Bindable]
			/**
			 * does the current entry have media content
			 * */
			private var _entryHasContent:Boolean;

			/**
			 * entry's reference id before the user had a chance to change it
			 * */
			private var _originalRefid:String;
			
			[Bindable]
			/**
			 * id of a VOD entry created from a VIdiun live entry
			 * */
			private var _recordedEntryId:String;


			// =================================================================
			// Methods
			// =================================================================

			
			/**
			 * compare tags ignoring spaces between them
			 * @return true if tags are equal
			 * */
			private function tagsCompare(tags1:String, tags2:String):Boolean {
				if (!tags1 && !tags2) {
					return true;
				}
				else if (!tags1) {
					return false;
				}
				else if (!tags2) {
					return false;
				}
				// now we are sure both have values
				var strippedTags1:String = tags1.replace(/\,\ /g, ",");
				var strippedTags2:String = tags2.replace(/\,\ /g, ",");
				
				return strippedTags1 == strippedTags2;
			}

			public function isChanged():Boolean {
				var res:Boolean = false;
				// entry data:
				var orig:VidiunBaseEntry = _entryData.selectedEntry;
				res ||= _selectedEntry.name != orig.name;
				res ||= _selectedEntry.description != orig.description;
				res ||= !tagsCompare(_selectedEntry.tags, orig.tags);
				res ||= _selectedEntry.referenceId != orig.referenceId;

				// categories:
				if (_entryCategories != null && catComplete.selectedItems && catComplete.selectedItems.length > 0) {
					res ||= !EntryDataHelper.areCollectionsEqual(_entryCategories, catComplete.selectedItems);
				}

				// custom data:
				if (_enableCustomData) {
					var customDataDataPack:CustomDataDataPack = _dpModel.getDataPack(CustomDataDataPack) as CustomDataDataPack;
					if (_profilesAC.length && customDataDataPack.metadataInfoArray && customDataDataPack.metadataInfoArray.length) {
						for (var i:int = 0; i < _profilesAC.length; i++) {
							var metadataInfo:CustomMetadataDataVO = customDataDataPack.metadataInfoArray.getItemAt(i) as CustomMetadataDataVO;
							var metadataProfile:VMCMetadataProfileVO = _profilesAC.getItemAt(i) as VMCMetadataProfileVO;
							if (metadataProfile && metadataProfile.profile && metadataInfo) {
								var newMetadataXML:XML = MetadataDataParser.toMetadataXML(metadataInfo, metadataProfile);
								if (metadataInfo.metadata) {
									var originalMetadataXML:XML = new XML(metadataInfo.metadata.xml);
									if (!(MetadataDataParser.compareMetadata(newMetadataXML, originalMetadataXML))) {
										res = true;
									}
								}
								//new metadata was inserted
								else if (newMetadataXML.children().length() > 0) {
									res = true;
								}
							}
						}
					}
				}
				return res;
			}


			public function save():void {
				if (_selectedEntry is VidiunLiveStreamEntry) {
					(_selectedEntry as VidiunLiveStreamEntry).offlineMessage = offlineMessage.text;
				}

				// update categories
				var saveEvent:VedEntryEvent = new VedEntryEvent(VedEntryEvent.UPDATE_ENTRY_CATEGORIES, _selectedEntry);
				saveEvent.data = EntryDataHelper.getCategoriesUpdateValues(catComplete.selectedItems, _entryCategories);
				controller.dispatch(saveEvent);
				// custom data save
				var cdEvent:MetadataDataEvent = new MetadataDataEvent(MetadataDataEvent.UPDATE);
				cdEvent.data = _selectedEntry.id;
				controller.dispatch(cdEvent);

				dispatchEvent(new InternalVedEvent(InternalVedEvent.PANEL_DATA_SAVED));
			}



			public function validate():void {
				var success:Boolean = true; // validation result
				var errorMessage:String;
				var errorTitle:String;

				// entry name
				if (StringUtil.trim(name_input.text) == "") {
					errorMessage = resourceManager.getString('drilldown', 'entryNameIsMandatory');
					errorTitle = resourceManager.getString('drilldown', 'metadataError');
					success = false;
				}
				if (!errorMessage) {
					// categories section
					// auto-complete event isn't full so we need to add this here
					if (catComplete.selectedItems.length > _entryData.maxNumCategories) {
						errorMessage = resourceManager.getString('drilldown', 'categoriesLimitErrorMsg', [_entryData.maxNumCategories]);
						errorTitle = resourceManager.getString('drilldown', 'categoriesErrorTitle');
						success = false;
					}
				}

				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, success, errorMessage, errorTitle);
				dispatchEvent(e);

				// custom data validation is done as part of update command, not here.
			}





			public function initData():void {
				_originalRefid = _selectedEntry.referenceId;

				if (_selectedEntry.status == VidiunEntryStatus.NO_CONTENT) {
					addImageThumb(noMediaImage);
					_entryHasContent = false;
				}
				else if ((_selectedEntry is VidiunMediaEntry) && (_selectedEntry as VidiunMediaEntry).mediaType == VidiunMediaType.IMAGE) {
					_entryHasContent = true;
					addImageThumb();
				}
				else {
					vdp3Loader.includeInLayout = vdp3Loader.visible = true;
					_entryHasContent = true;
					//mix or video

					loadVDP();
				}

				// set landing page string:
				var landingPage:String = (_dpModel.getDataPack(ContextDataPack) as ContextDataPack).landingPage;
				if (landingPage) {
					var replaceIndex:int = landingPage.indexOf(ENTRY_PLACEHOLDER);
					if (replaceIndex > -1)
						landingPageLabel.text = landingPage.replace(ENTRY_PLACEHOLDER, _selectedEntry.id);
					else
						landingPageLabel.text = landingPage + _selectedEntry.id;
				}

				if (_enableCustomData && _profilesAC) {
					// only list custom data if custom data profiles are loaded
					var listCustomData:MetadataDataEvent = new MetadataDataEvent(MetadataDataEvent.LIST);
					controller.dispatch(listCustomData);
				}
				
				if (_selectedEntry is VidiunLiveStreamEntry
					&& (_selectedEntry as VidiunLiveStreamEntry).sourceType == VidiunSourceType.LIVE_STREAM
					&& (_selectedEntry as VidiunLiveStreamEntry).dvrStatus == VidiunDVRStatus.ENABLED
					&& (_selectedEntry as VidiunLiveStreamEntry).recordStatus != VidiunRecordStatus.DISABLED) {
					// check status
					var liveStatus:VedEntryEvent = new VedEntryEvent(VedEntryEvent.GET_LIVESTREAM_STATUS, _selectedEntry);
					controller.dispatch(liveStatus);
				}

				var listCats:VedEntryEvent = new VedEntryEvent(VedEntryEvent.GET_ENTRY_CATEGORIES, _selectedEntry);
				controller.dispatch(listCats);
			}


			public function destroy():void {
				if (_catWatcher) {
					_catWatcher.unwatch();
				}
				
				if (_loadWatcher) {
					_loadWatcher.unwatch();
				}

				if (_profsWatcher) {
					_profsWatcher.unwatch();
				}

				var curCustomData:SingleCustomData;
				for (var i:int = editableBox.numChildren - 1; i >= 1; i--) {
					curCustomData = editableBox.getChildAt(i) as SingleCustomData;
					if (curCustomData) {
						curCustomData.removeEventListener(SingleCustomData.SCROLL_TO_TOP, scrollToTop);
						curCustomData.destroy();
					}
				}
			}


			
			public function clear():void {

				var vee:VedEntryEvent = new VedEntryEvent(VedEntryEvent.RESET_ENTRY_CATEGORIES, null);
				controller.dispatch(vee);

				_originalRefid = null;
				_entryCategories = null;
				if (vdp3StaticSwfLoader && vdp3StaticSwfLoader.content) {
					vdp3StaticSwfLoader.content['sendNotification'](VdpEventTypes.DO_PAUSE);
					vdp3StaticSwfLoader.content['sendNotification'](VdpEventTypes.CLEAN_MEDIA); //clear the entry from the vdp
				}
				
				// custom data (SingleCustomData) is built from scratch every time final mxml is set, so no need to clear it
				// (takes a lot of time for large schemas)
//				if (_enableCustomData) {
//					var d1:Date, d2:Date = new Date();
//					var reset:MetadataDataEvent = new MetadataDataEvent(MetadataDataEvent.RESET);
//					controller.dispatch(reset);
//					d1 = new Date();
//					trace("clear custom data:", d1.time - d2.time);
//				}
				
				if (_selectedEntry is VidiunLiveStreamEntry && (_selectedEntry as VidiunLiveStreamEntry).sourceType == VidiunSourceType.LIVE_STREAM) {
					vee = new VedEntryEvent(VedEntryEvent.RESET_LIVESTREAM_STATUS, null);
					controller.dispatch(vee);
				}
			}



			public function init():void {
				Security.allowDomain("*");
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.METADATA_PANEL);
				if (_enableCustomData) {
					var filterData:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
					if (filterData.filterModel.metadataProfiles) {
						buildProfiles(filterData.filterModel.metadataProfiles, filterData.filterModel.formBuilders);
					}
					else {
						// if custom data profiles are not loaded, load them
						_profsWatcher = BindingUtils.bindSetter(onSetProfiles, filterData, ["filterModel", "formBuilders"]);
						var lmdp:MetadataProfileEvent = new MetadataProfileEvent(MetadataProfileEvent.LIST);
						controller.dispatch(lmdp);
					}
				}
				else {
					_profileNames = new ArrayCollection();
				}
			}


			/**
			 * after custom data profiles are loaded we can build the custom data UI.
			 * */
			private function onSetProfiles(value:ArrayCollection):void {
				if (!value) {
					return;
				}
				_profsWatcher.unwatch();
				var filterData:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
				buildProfiles(filterData.filterModel.metadataProfiles, filterData.filterModel.formBuilders);
				var listCustomData:MetadataDataEvent = new MetadataDataEvent(MetadataDataEvent.LIST);
				controller.dispatch(listCustomData);
			}


			protected function onCreationComplete():void {
				name_input.setFocus();
				var vc:VidiunClient = (_dpModel.getDataPack(ContextDataPack) as ContextDataPack).vc;
				new VACTagsController(tagsComplete, vc, VidiunTaggedObjectType.ENTRY);
				new VACCategoryController(catComplete, vc);
			}


			/**
			 * Load VDP.
			 * if we already have a loaded VDP, we add it to the parent of the new (instance) vdploader
			 * instead of loading a new vdp.
			 */
			private function loadVDP():void {
				//if this is the second time we open the content
				if (vdp3StaticSwfLoader && vdp3StaticSwfLoader.content) {
					// parent of instance loader
					var vdp3LoaderParent:DisplayObjectContainer = vdp3Loader.parent;
					// add the static loader instead of the instance loader: (if vdp3Loader has content it means we are in the same 
					// drill down session)
					if (vdp3LoaderParent && !vdp3Loader.content) {
						vdp3LoaderParent.addChildAt(vdp3StaticSwfLoader, vdp3LoaderParent.getChildIndex(vdp3Loader));
						vdp3LoaderParent.removeChild(vdp3Loader);
					}
					// listen to vdp ready to show it because on the second time if we won't do that we will see the prev thumb
					// because this is static VDP (due to performance issue)
					vdp3StaticSwfLoader.visible = false;
					vdp3StaticSwfLoader.content.addEventListener(VdpEventTypes.ENTRY_READY, showVDP);
					vdp3StaticSwfLoader.content["sendNotification"](VdpEventTypes.CHANGE_MEDIA, {entryId: _entryData.selectedEntry.id});
				}
				else {
					var context:ContextDataPack = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
					var newUrl:String = context.protocol + context.cdnHost + "/vwidget/wid/_" + context.vc.partnerId + "/ui_conf_id/" + context.drilldownUiconf + "/nowrapper/1";
					vdp3Loader.scaleContent = false;
					vdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain(), SecurityDomain.currentDomain);
					vdp3Loader.load(newUrl);
				}
			}



			private function showVDP(event:Event = null):void {
				vdp3StaticSwfLoader.visible = true;
				vdp3StaticSwfLoader.includeInLayout = true;
			}




			/**
			 * pause the preview player
			 * */
			public function pausePreview():void {
				if (vdp3StaticSwfLoader && vdp3StaticSwfLoader.content) {
					vdp3StaticSwfLoader.content['sendNotification'](VdpEventTypes.DO_PAUSE);
				}
			}


			private function addImageThumb(imgSource:Object = null):void {
				if (vdp3StaticSwfLoader) {
					// if VDP was never loaded before opening a no content entry
					vdp3StaticSwfLoader.includeInLayout = vdp3StaticSwfLoader.visible = false;
				}
				if (vdp3StaticSwfLoader != vdp3Loader) {
					// if we start with no content image after we already have a VDP
					vdp3Loader.includeInLayout = vdp3Loader.visible = false;
				}
				if (imgSource) {
					entryImg.source = imgSource;
				}
				else {
					if ((VMvCModel.getInstance().getDataPack(PermissionsDataPack) as PermissionsDataPack).enableThumbResize) {
						entryImg.source = _selectedEntry.thumbnailUrl + "/width/290/height/160/bgcolor/F7F7F7/type/2";
					}
					else {
						entryImg.source = _selectedEntry.thumbnailUrl;
					}
				}
			}


			private function onPreviewClick():void {
				//stop the player from playing 
				if (vdp3StaticSwfLoader) {
					vdp3StaticSwfLoader.content['sendNotification'](VdpEventTypes.DO_PAUSE);
				}
				EntryUtil.openPreview(_selectedEntry, _dpModel, !_showEmbed);
			}


			private function uncaughtErrorHandler(event:Event):void {
				event.preventDefault();
				trace("uncaughtErrorHandler in Entry Metadata: ");
				trace(event, event["error"]);
			}


			/**
			 * Vdp loaded, initialize it.
			 */
			private function onVDP3Loaded(event:Event):void {
				vdp3Loader.tabChildren = false;
				vdp3Loader.tabEnabled = false;
				name_input.setFocus();
				vdp3StaticSwfLoader = vdp3Loader;
				if (vdp3Loader.loaderInfo.hasOwnProperty("uncaughtErrorEvents"))
					IEventDispatcher(vdp3Loader.loaderInfo["uncaughtErrorEvents"]).addEventListener("uncaughtError", uncaughtErrorHandler, false, 1, true);

				//set vdp params
				var context:ContextDataPack = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				var params:Object = new Object();
				params.entryId = _entryData.selectedEntry.id;
				params.vs = context.vc.vs;
				params.partnerId = context.vc.partnerId;
				params.subpId = context.vc.partnerId + "00";
				params.cdnHost = context.cdnHost;
				params.disableAlerts = disableVDPAlerts;
				params.debugMode = context.debugMode;
				params.allowCookies = true;
				params = VPlayerUtil.overrideStrings(params);
				params = VPlayerUtil.overrideElementStrings(params);

				vdp3StaticSwfLoader.content["flashvars"] = params;
				//start the loading sqeunce of the vdp	
				vdp3StaticSwfLoader.content["init"]();
			}



			/**
			 * open drilldown window with the recorded entry (Vidiun live only)
			 * */
			protected function showRecordedEntry(event:MouseEvent):void {
				// create the new model 
				var cg:VMvCEvent = new ModelEvent(ModelEvent.DUPLICATE_ENTRY_DETAILS_MODEL);
				controller.dispatch(cg);
				cg = new VedEntryEvent(VedEntryEvent.GET_ENTRY_AND_DRILLDOWN, null, _recordedEntryId);
				controller.dispatch(cg);
			}


			/**
			 * open drilldown window with the parent entry
			 * (the entry this clip was made from)
			 * */
			protected function showParentEntry(event:MouseEvent):void {
				// create the new model 
				var cg:VMvCEvent = new ModelEvent(ModelEvent.DUPLICATE_ENTRY_DETAILS_MODEL);
				controller.dispatch(cg);
				cg = new VedEntryEvent(VedEntryEvent.GET_ENTRY_AND_DRILLDOWN, null, _selectedEntry.rootEntryId);
				controller.dispatch(cg);
			}


			/**
			 * request JS to open the clipApp in clipping mode
			 * */
			protected function openClipping(event:MouseEvent):void {
				pausePreview();
				VedJSGate.openClipApp(_selectedEntry.id, "clip");
			}


			/**
			 * request JS to open the clipApp in trimming mode
			 * */
			protected function openTrimming(event:MouseEvent):void {
				pausePreview();
				VedJSGate.openClipApp(_selectedEntry.id, "trim");
			}

			
			/**
			 * request JS to open the clipApp in live clipping mode
			 * */
			protected function openLiveClipping(event:MouseEvent):void {
				pausePreview();
				VedJSGate.openClipApp(_selectedEntry.id, "live");
			}


			private function getRefid(refid:String):String {
				if (refid == VidiunClient.NULL_STRING) {
					return '';
				}
				else
					return refid;
			}


			protected function referenceId_changeHandler(event:Event):void {
				if (event.target.text == '') {
					if (_originalRefid == null) {
						// no change from original empty value
						_selectedEntry.referenceId = null;
					}
					else {
						// used to have value, delete it
						_selectedEntry.referenceId = VidiunClient.NULL_STRING;
					}
				}
				else {
					_selectedEntry.referenceId = event.target.text;
				}
			}

			// =================================================================
			// Categories Stuff
			// =================================================================

			[Bindable]
			/**
			 * list of categories the current entry is associated with
			 * */
			private var _entryCategories:ArrayCollection;


			/**
			 * pass the given categories to the autocomplete component
			 * @param value array collection of <code>VidiunCategory</code> objects
			 * */
			private function setCategoriesOnScreen(value:ArrayCollection):void {
				catComplete.selectedItems = value;
				_entryCategories = value;
			}


			/**
			 * open category editor
			 * */
			private function btnCategories_clickHandler(event:MouseEvent):void {
				var vc:VidiunClient = (_dpModel.getDataPack(ContextDataPack) as ContextDataPack).vc;
				var catBrs:CategoryBrowser = new CategoryBrowser();
				catBrs.filterModel = (_dpModel.getDataPack(FilterDataPack) as FilterDataPack).filterModel;
				catBrs.vClient = vc;
				catBrs.setCategories(catComplete.selectedItems.source);
				catBrs.addEventListener(Event.CLOSE, closeCatPopup);
				catBrs.addEventListener("apply", setCatsToAutocomplete);

				PopUpManager.addPopUp(catBrs, this, true);
				PopUpManager.centerPopUp(catBrs);
			}


			/**
			 * set new selected items to catComplete
			 * */
			private function setCatsToAutocomplete(e:Event):void {
				var tgt:CategoryBrowser = e.target as CategoryBrowser;
				var cats:Array = tgt.getCategories(); //VidiunCategory objects
				var cat:VidiunCategory;
				var vCats:Array = [];
				for each (cat in cats) {
					vCats.push(cat);
				}
				catComplete.selectedItems = new ArrayCollection(vCats);
			}


			private function closeCatPopup(e:Event):void {
				var tgt:CategoryBrowser = e.target as CategoryBrowser;
				if (tgt) {
					PopUpManager.removePopUp(tgt);
					tgt.removeEventListener(Event.CLOSE, closeCatPopup);
					tgt.removeEventListener("apply", setCatsToAutocomplete);
				}
			}



			// =================================================================
			// Preview and Embed Stuff
			// =================================================================



			[Bindable]
			private var _previewEnable:Boolean = true;


			public function get previewEnable():Boolean {
				return _previewEnable;
			}


			public function set previewEnable(value:Boolean):void {
				_previewEnable = value;
			}


			[Bindable]
			public var previewLabel:String = ResourceManager.getInstance().getString('drilldown', 'previewAndEmbed');


			[Bindable]
			/**
			 * @copy #showEmbed
			 * */
			private var _showEmbed:Boolean = false;


			/**
			 * show only "preview" and not "preview & embed"
			 * @internal
			 * used by roles and permissions
			 */
			public function set showEmbed(value:Boolean):void {
				if (value)
					previewLabel = resourceManager.getString('drilldown', 'previewAndEmbed');
				else {
					previewLabel = resourceManager.getString('drilldown', 'previewOnly');
				}
				_showEmbed = value;
			}


			public function get showEmbed():Boolean {
				return _showEmbed;
			}
			// =================================================================
			// Custom Metadata Stuff
			// =================================================================

			[Bindable]
			/**
			 * list of profiles presented by the tab.
			 * <code>VMCMetadataProfileVO</code> objects
			 * */
			private var _profilesAC:ArrayCollection;

			[Bindable]
			/**
			 * dataprovider for the profiles dropdown
			 * */
			private var _profileNames:ArrayCollection;


			/**
			 * create the visual representation of each profile
			 * @param profilesAC list of custom data profiles (<code>VMCMetadataProfileVO</code>)
			 * @param formBuildersAC	list of matching form builders (<code>FormBuilder</code>)
			 * */
			private function buildProfiles(profilesAC:ArrayCollection, formBuildersAC:ArrayCollection):void {
				_profilesAC = new ArrayCollection();
				_profileNames = new ArrayCollection();
				// header for entry metadata section in the dropdown
				_profileNames.addItem(resourceManager.getString('drilldown', 'metadata'));
				// remove custom datas, don't remove entry data box
				while (editableBox.numChildren > 1) {
					editableBox.removeChildAt(1);
				}

				for (var i:int = 0; i < profilesAC.length; i++) {
					var curProfile:VMCMetadataProfileVO = profilesAC.getItemAt(i) as VMCMetadataProfileVO;

					if (curProfile.profile && curProfile.metadataFieldVOArray && curProfile.metadataFieldVOArray.length > 0) {
						var curCustomData:SingleCustomData = new SingleCustomData();
						curCustomData.visibleHeader = profilesAC.length > 1;
						curCustomData.formBuilder = formBuildersAC.getItemAt(i) as EntryFormBuilder;
						curCustomData.metadataEditable = customDataEditable;
						curCustomData.addEventListener(SingleCustomData.SCROLL_TO_TOP, scrollToTop, false, 0, true);

						_profilesAC.addItem(curProfile);
						_profileNames.addItem(curProfile.profile.name);
						editableBox.addChild(curCustomData);
					}
				}

				scrollToTop(null);
			}


			/**
			 * jump to the top profile (entry data)
			 * */
			private function scrollToTop(event:Event):void {
				editableBox.verticalScrollPosition = 0;
			}


			private function jumpToProfile():void {
				var scrollPos:int = 0;
				var childIndex:int = profilesCB.selectedIndex;
				if (childIndex != -1) {
					//sums up all heights before the desired profile
					for (var i:int = 0; i < childIndex; i++) {
						scrollPos += editableBox.getChildAt(i).height + customDataVerticalGap;
					}
					editableBox.verticalScrollPosition = scrollPos;
				}
				profilesCB.selectedIndex = -1;
			}


			protected function tagsComplete_changeHandler(event:Event):void {
				var str:String = '';
				var ac:ArrayCollection = tagsComplete.selectedItems;
				for each (var tag:String in ac) {
					str += tag + ",";
				}
				if (ac.length) {
					str = str.substr(0, str.length - 1);
				}
				_selectedEntry.tags = str;
			}
			
			protected function landingPageLabel_clickHandler(event:MouseEvent):void
			{
				landingPageLabel.mx_internal::getTextField().setSelection(0, landingPageLabel.text.length);
				System.setClipboard(landingPageLabel.text);
			}
			
		]]>
	</mx:Script>

	<mx:StringValidator id="nameListValidator" source="{name_input}" property="text" triggerEvent="change"
						required="true"
						requiredFieldError="{resourceManager.getString('drilldown', 'entryNameIsMandatory')}"/>


	<mx:VBox width="100%" height="{noneditable.height}" minWidth="300">
		<!-- navigation -->
		<mx:HBox width="100%">
			<mx:Spacer width="{LABEL_WIDTH}" />
			<mx:ComboBox id="profilesCB" dataProvider="{_profileNames}" change="jumpToProfile()"
						 styleName="customDataProfilesCB" prompt="{resourceManager.getString('drilldown','jumpToPrompt')}"
						 selectedIndex="-1" fontWeight="bold" visible="{_profileNames.length > 2}"
						 includeInLayout="{_profileNames.length > 2}" width="{TEXT_WIDTH}"/>
		</mx:HBox>
		<!-- entry data -->
		<mx:VBox id="editableBox" styleName="noPadding" verticalGap="{customDataVerticalGap}"
				 height="{noneditable.height - profilesCB.height - getStyle('verticalGap')}" width="100%">
			<mx:VBox id="entryMetadata" width="100%">
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('drilldown','name')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:TextInput id="name_input" width="{TEXT_WIDTH}" text="{selectedEntry.name}"
								  change="{selectedEntry.name = event.target.text}" styleName="drilldownInput"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('drilldown','description')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:TextArea id="descriptionTi" width="{TEXT_WIDTH}" text="{selectedEntry.description}"
								 change="{selectedEntry.description = event.target.text}" styleName="drilldownInput"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label id="tagsLbl" text="{resourceManager.getString('drilldown','tags')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel" />

					<components:AutoComplete id="tagsComplete" width="{TEXT_WIDTH}" height="80"
											 selectedItemStyleName="selectionBox" showRemoveIcon="true"
											 allowMultipleSelection="true" allowNewValues="true" labelField="tag"
											 change="tagsComplete_changeHandler(event)"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:HBox styleName="noPadding" width="{LABEL_WIDTH}" horizontalScrollPolicy="off" horizontalGap="2">
						<mx:Label text="{resourceManager.getString('drilldown','drillDownCategories')}:"
								  styleName="drillDownLabel"/>
						<mx:LinkButton id="btnCategories" click="btnCategories_clickHandler(event)"
									   styleName="editButton" enabled="{!loadingFlag}" visible="{categoriesEditable}"/>
					</mx:HBox>
					<components:AutoComplete id="catComplete" width="{TEXT_WIDTH}" height="80"
											 selectedItemStyleName="selectionBox" showRemoveIcon="true"
											 allowMultipleSelection="true" labelField="name" enabled="{categoriesEditable &amp;&amp; !loadingFlag}"
											 selectionItemRendererClassFactory="{new ClassFactory(CategorySelectedItem)}"
											 prompt="{resourceManager.getString('drilldown','categoriesPrompt')}"/>
				</mx:HBox>
				<mx:HBox id="offlineHolder" width="100%" 
						 visible="{selectedEntry is VidiunLiveStreamEntry}"
						 includeInLayout="{selectedEntry is VidiunLiveStreamEntry}">
					<mx:Label text="{resourceManager.getString('drilldown','offlineMessage')}" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:TextArea id="offlineMessage" width="{TEXT_WIDTH}" text="{selectedEntry.offlineMessage}"
								 styleName="drilldownInput"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label htmlText="{resourceManager.getString('drilldown','referenceId')}" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel" visible="{referenceId.visible}"/>
					<mx:TextInput id="referenceId" width="{TEXT_WIDTH}" text="{getRefid(selectedEntry.referenceId)}"
								  change="referenceId_changeHandler(event)" styleName="drilldownInput"/>
				</mx:HBox>
				<mx:Spacer height="20"/>
			</mx:VBox>
			<!-- entry custom data goes here -->
		</mx:VBox>
	</mx:VBox>


	<!-- entry static metadata -->
	<mx:VBox id="noneditable" width="354" height="100%" styleName="noVGap" paddingLeft="10">
		<!-- entry id -->
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('drilldown','entryId')}:" styleName="drillDownTitleLabel"/>
			<mx:Label text="{selectedEntry.id}" selectable="true" styleName="drillDownTitleLabel"/>
		</mx:HBox>
		<!-- player -->
		<mx:HBox width="100%" horizontalAlign="center" id="vdpContainer">
			<!--<mx:HBox id="vdpContainer" styleName="playerContainer">-->
			<mx:SWFLoader id="vdp3Loader" width="340" height="194" complete="{onVDP3Loaded(event)}"/>
			<mx:Image id="entryImg" width="340" height="194" maintainAspectRatio="true" horizontalAlign="center" verticalAlign="middle" 
					  includeInLayout="{!vdp3Loader.includeInLayout}" visible="{!vdp3Loader.visible}"/>
			<!--</mx:HBox>-->
		</mx:HBox>
		<!-- actions -->
		<mx:HBox width="100%" visible="{_entryHasContent}" includeInLayout="{_entryHasContent}">
			<mx:LinkButton id="previewAndEmbed" label="{previewLabel}" click="{onPreviewClick()}" styleName="pne"
						   enabled="{(selectedEntry.status == VidiunEntryStatus.READY) &amp;&amp; _previewEnable}"/>
			<mx:Spacer width="100%"/>
			<mx:LinkButton id="btnClipping" click="openClipping(event)" styleName="bold"
						   enabled="{EntryDataHelper.entryHasSource(_distributionData.flavorParamsAndAssetsByEntryId)}"
						   label="{resourceManager.getString('drilldown','openClipping')}"/>
			<mx:LinkButton id="btnTrimming" click="openTrimming(event)" styleName="bold"
						   enabled="{EntryDataHelper.entryHasSource(_distributionData.flavorParamsAndAssetsByEntryId)}"
						   label="{resourceManager.getString('drilldown','openTrimming')}"/>
			<mx:LinkButton id="btnVOD" click="openLiveClipping(event)" styleName="bold"
						   visible="{_entryData.selectedLiveEntryIsLive == VidiunNullableBoolean.TRUE_VALUE}" 
						   includeInLayout="{_entryData.selectedLiveEntryIsLive == VidiunNullableBoolean.TRUE_VALUE}"
						   label="{resourceManager.getString('drilldown', 'openVOD')}"/>
		</mx:HBox>
		<!-- no content message -->
		<mx:Label visible="{!_entryHasContent}" includeInLayout="{!_entryHasContent}"
				  text="{resourceManager.getString('drilldown','noContentMessage')}" styleName="noContentLabel"/>
		<mx:Spacer height="20"/>
		
		<!-- non-editable info -->
		<mx:VBox styleName="noPadding" width="100%" height="190" horizontalScrollPolicy="off" verticalGap="0">
			
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('drilldown','creator')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.creatorId}" width="100%" styleName="drillDownSubLabel"/>
			</mx:HBox>
			<mx:HBox width="100%" >
				<mx:Label text="{resourceManager.getString('drilldown','createdDate')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{EntryDataHelper.formatDate(selectedEntry.createdAt)}" width="100%"
						  styleName="drillDownSubLabel"/>
			</mx:HBox>
			<mx:HBox width="100%" paddingBottom="15" visible="{landingPageLabel.text != ''}" includeInLayout="{landingPageLabel.text != ''}" >
				<mx:Label text="{resourceManager.getString('drilldown','landingPage')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label id="landingPageLabel" selectable="true" width="220" truncateToFit="false" styleName="drillDownSubLabel" 
						  click="landingPageLabel_clickHandler(event)"/>
			</mx:HBox>
			<!-- recorded entry id - when this is a live entry, the corresponding VOD entry -->
			<mx:HBox width="100%" paddingBottom="15"  
					 visible="{_recordedEntryId != null}" includeInLayout="{_recordedEntryId != null}" >
				<mx:Label text="{resourceManager.getString('drilldown','vodEntry')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:LinkButton label="{_recordedEntryId}" click="showRecordedEntry(event)" />
			</mx:HBox>
			<!-- when this is a recorded entry - the original live entry -->
			<mx:HBox width="100%" paddingBottom="15" 
					 visible="{selectedEntry.sourceType == VidiunSourceType.RECORDED_LIVE}"
					 includeInLayout="{selectedEntry.sourceType == VidiunSourceType.RECORDED_LIVE}" >
				<mx:Label text="{resourceManager.getString('drilldown','archive')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:LinkButton label="{selectedEntry.rootEntryId}" click="showParentEntry(event)" />
			</mx:HBox>
	
			<mx:HRule width="100%"/>
			<!-- - - - - - - 2 columns - - - - - - - -->
			<mx:HBox width="100%" styleName="noPadding" paddingTop="15" >
				<mx:VBox width="100%" styleName="noPadding">
					<mx:HBox width="100%">
						<mx:Label text="{resourceManager.getString('drilldown','type')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{EntryDataHelper.getMediaTypes(int(selectedEntry.mediaType),selectedEntry.type)}"
								  width="{RIGHT_TEXT_WIDTH}" styleName="drillDownSubLabel"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="{resourceManager.getString('drilldown', 'moderation')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{EntryDataHelper.getModeration(selectedEntry.moderationStatus)}"
								  width="{RIGHT_TEXT_WIDTH}" styleName="drillDownSubLabel"/>
					</mx:HBox>
					<mx:HBox width="100%" visible="{_entryHasContent}" includeInLayout="{_entryHasContent}">
						<mx:Label text="{resourceManager.getString('drilldown', 'plays')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.plays}" width="{RIGHT_TEXT_WIDTH}" styleName="drillDownSubLabel"/>
					</mx:HBox>
					<mx:HBox width="100%" visible="{_entryHasContent &amp;&amp; selectedEntry.rank}"
							 includeInLayout="{_entryHasContent &amp;&amp; selectedEntry.rank}">
						<mx:Label text="{resourceManager.getString('drilldown','rating')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.rank}" width="{RIGHT_TEXT_WIDTH}" styleName="drillDownSubLabel"/>
					</mx:HBox>
				</mx:VBox>
	
				<mx:VBox width="100%" styleName="noPadding">
					<mx:HBox width="100%" visible="{_entryHasContent &amp;&amp; !(selectedEntry is VidiunLiveStreamEntry)
							 &amp;&amp; (selectedEntry.mediaType != VidiunMediaType.IMAGE)}" 
							 	includeInLayout="{_entryHasContent &amp;&amp; !(selectedEntry is VidiunLiveStreamEntry)
								&amp;&amp; (selectedEntry.mediaType != VidiunMediaType.IMAGE)}">
						<mx:Label text="{resourceManager.getString('drilldown','duration')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{VTimeUtil.formatTime2(selectedEntry.duration)}" width="{RIGHT_TEXT_WIDTH2}"
								  styleName="drillDownSubLabel"/>
					</mx:HBox>
					<mx:HBox width="100%" visible="{_entryHasContent &amp;&amp; selectedEntry.moderationCount}"
							 includeInLayout="{_entryHasContent &amp;&amp; selectedEntry.moderationCount}">
						<mx:Label text="{resourceManager.getString('drilldown','flags')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.moderationCount}" width="{RIGHT_TEXT_WIDTH2}"
								  styleName="drillDownSubLabel"/>
					</mx:HBox>
					<mx:HBox width="100%" visible="{_entryHasContent &amp;&amp; selectedEntry.votes}"
							 includeInLayout="{_entryHasContent &amp;&amp; selectedEntry.votes}">
						<mx:Label text="{resourceManager.getString('drilldown','votesCount')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:Label text="{selectedEntry.votes}" width="{RIGHT_TEXT_WIDTH2}" styleName="drillDownSubLabel"/>
					</mx:HBox>
	
					<mx:HBox width="100%" visible="{selectedEntry.rootEntryId != selectedEntry.id &amp;&amp; selectedEntry.sourceType != VidiunSourceType.RECORDED_LIVE}"
							 includeInLayout="{selectedEntry.rootEntryId != selectedEntry.id &amp;&amp; selectedEntry.sourceType != VidiunSourceType.RECORDED_LIVE}">
						<mx:Label text="{resourceManager.getString('drilldown','clippedFrom')}:" width="{RIGHT_LABEL_WIDTH}"
								  styleName="drillDownLabel"/>
						<mx:LinkButton label="{selectedEntry.rootEntryId}" click="showParentEntry(event)"
									   width="{RIGHT_TEXT_WIDTH2}" paddingLeft="0"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
</mx:Module>
